
MicroSDAM16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00000e22  00000eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000322  008000c2  008000c2  00000f18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000236d  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000922  00000000  00000000  00003469  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000123c  00000000  00000000  00003d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  00004fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000719  00000000  00000000  000055d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002116  00000000  00000000  00005ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007dff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a2 ec       	ldi	r26, 0xC2	; 194
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3e       	cpi	r26, 0xE4	; 228
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 35 06 	call	0xc6a	; 0xc6a <main>
  8a:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_init>:
	 readAttempts=0;
	 while(++readAttempts != SD_MAX_WRITE_ATTEMPTS)
	 if((read = SPI_transfer(0xFF)) != 0xFF) { *token = 0xFF; break; }   		 
		 	
}
 }
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	fc 01       	movw	r30, r24
  9c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__data_end>
  a0:	30 93 c3 00 	sts	0x00C3, r19	; 0x8000c3 <__data_end+0x1>
  a4:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__data_end+0x2>
  a8:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <__data_end+0x3>
  ac:	9a b1       	in	r25, 0x0a	; 10
  ae:	98 69       	ori	r25, 0x98	; 152
  b0:	9a b9       	out	0x0a, r25	; 10
  b2:	e1 30       	cpi	r30, 0x01	; 1
  b4:	f1 05       	cpc	r31, r1
  b6:	61 f0       	breq	.+24     	; 0xd0 <USART_init+0x3e>
  b8:	e2 30       	cpi	r30, 0x02	; 2
  ba:	f1 05       	cpc	r31, r1
  bc:	69 f0       	breq	.+26     	; 0xd8 <USART_init+0x46>
  be:	ef 2b       	or	r30, r31
  c0:	71 f4       	brne	.+28     	; 0xde <USART_init+0x4c>
  c2:	80 b5       	in	r24, 0x20	; 32
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	80 bd       	out	0x20, r24	; 32
  c8:	80 b5       	in	r24, 0x20	; 32
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	80 bd       	out	0x20, r24	; 32
  ce:	07 c0       	rjmp	.+14     	; 0xde <USART_init+0x4c>
  d0:	80 b5       	in	r24, 0x20	; 32
  d2:	80 63       	ori	r24, 0x30	; 48
  d4:	80 bd       	out	0x20, r24	; 32
  d6:	03 c0       	rjmp	.+6      	; 0xde <USART_init+0x4c>
  d8:	80 b5       	in	r24, 0x20	; 32
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	80 bd       	out	0x20, r24	; 32
  de:	67 30       	cpi	r22, 0x07	; 7
  e0:	71 05       	cpc	r23, r1
  e2:	e9 f0       	breq	.+58     	; 0x11e <USART_init+0x8c>
  e4:	3c f4       	brge	.+14     	; 0xf4 <USART_init+0x62>
  e6:	65 30       	cpi	r22, 0x05	; 5
  e8:	71 05       	cpc	r23, r1
  ea:	59 f0       	breq	.+22     	; 0x102 <USART_init+0x70>
  ec:	66 30       	cpi	r22, 0x06	; 6
  ee:	71 05       	cpc	r23, r1
  f0:	91 f0       	breq	.+36     	; 0x116 <USART_init+0x84>
  f2:	23 c0       	rjmp	.+70     	; 0x13a <USART_init+0xa8>
  f4:	68 30       	cpi	r22, 0x08	; 8
  f6:	71 05       	cpc	r23, r1
  f8:	b1 f0       	breq	.+44     	; 0x126 <USART_init+0x94>
  fa:	69 30       	cpi	r22, 0x09	; 9
  fc:	71 05       	cpc	r23, r1
  fe:	d1 f0       	breq	.+52     	; 0x134 <USART_init+0xa2>
 100:	1c c0       	rjmp	.+56     	; 0x13a <USART_init+0xa8>
 102:	80 b5       	in	r24, 0x20	; 32
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	80 bd       	out	0x20, r24	; 32
 108:	80 b5       	in	r24, 0x20	; 32
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	80 bd       	out	0x20, r24	; 32
 10e:	80 b5       	in	r24, 0x20	; 32
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	80 bd       	out	0x20, r24	; 32
 114:	12 c0       	rjmp	.+36     	; 0x13a <USART_init+0xa8>
 116:	80 b5       	in	r24, 0x20	; 32
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 bd       	out	0x20, r24	; 32
 11c:	0e c0       	rjmp	.+28     	; 0x13a <USART_init+0xa8>
 11e:	80 b5       	in	r24, 0x20	; 32
 120:	84 60       	ori	r24, 0x04	; 4
 122:	80 bd       	out	0x20, r24	; 32
 124:	0a c0       	rjmp	.+20     	; 0x13a <USART_init+0xa8>
 126:	80 b5       	in	r24, 0x20	; 32
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	80 bd       	out	0x20, r24	; 32
 12c:	80 b5       	in	r24, 0x20	; 32
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 bd       	out	0x20, r24	; 32
 132:	03 c0       	rjmp	.+6      	; 0x13a <USART_init+0xa8>
 134:	80 b5       	in	r24, 0x20	; 32
 136:	86 60       	ori	r24, 0x06	; 6
 138:	80 bd       	out	0x20, r24	; 32
 13a:	0f 2e       	mov	r0, r31
 13c:	f0 ed       	ldi	r31, 0xD0	; 208
 13e:	cf 2e       	mov	r12, r31
 140:	f2 e1       	ldi	r31, 0x12	; 18
 142:	df 2e       	mov	r13, r31
 144:	f3 e1       	ldi	r31, 0x13	; 19
 146:	ef 2e       	mov	r14, r31
 148:	f1 2c       	mov	r15, r1
 14a:	f0 2d       	mov	r31, r0
 14c:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <__data_end>
 150:	30 91 c3 00 	lds	r19, 0x00C3	; 0x8000c3 <__data_end+0x1>
 154:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <__data_end+0x2>
 158:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <__data_end+0x3>
 15c:	c7 01       	movw	r24, r14
 15e:	b6 01       	movw	r22, r12
 160:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodsi4>
 164:	21 50       	subi	r18, 0x01	; 1
 166:	29 b9       	out	0x09, r18	; 9
 168:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <__data_end>
 16c:	30 91 c3 00 	lds	r19, 0x00C3	; 0x8000c3 <__data_end+0x1>
 170:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <__data_end+0x2>
 174:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <__data_end+0x3>
 178:	c7 01       	movw	r24, r14
 17a:	b6 01       	movw	r22, r12
 17c:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodsi4>
 180:	da 01       	movw	r26, r20
 182:	c9 01       	movw	r24, r18
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	a1 09       	sbc	r26, r1
 188:	b1 09       	sbc	r27, r1
 18a:	89 2f       	mov	r24, r25
 18c:	9a 2f       	mov	r25, r26
 18e:	ab 2f       	mov	r26, r27
 190:	bb 27       	eor	r27, r27
 192:	80 bd       	out	0x20, r24	; 32
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <T>:
 19e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
 1a2:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x1>
 1a6:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <__data_end+0x2>
 1aa:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <__data_end+0x3>
 1ae:	89 32       	cpi	r24, 0x29	; 41
 1b0:	93 42       	sbci	r25, 0x23	; 35
 1b2:	a1 05       	cpc	r26, r1
 1b4:	b1 05       	cpc	r27, r1
 1b6:	34 f4       	brge	.+12     	; 0x1c4 <T+0x26>
 1b8:	87 e8       	ldi	r24, 0x87	; 135
 1ba:	93 e1       	ldi	r25, 0x13	; 19
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <T+0x1e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <T+0x24>
 1c2:	00 00       	nop
 1c4:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
 1c8:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x1>
 1cc:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <__data_end+0x2>
 1d0:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <__data_end+0x3>
 1d4:	89 38       	cpi	r24, 0x89	; 137
 1d6:	93 41       	sbci	r25, 0x13	; 19
 1d8:	a1 05       	cpc	r26, r1
 1da:	b1 05       	cpc	r27, r1
 1dc:	34 f4       	brge	.+12     	; 0x1ea <T+0x4c>
 1de:	87 ec       	ldi	r24, 0xC7	; 199
 1e0:	9f ea       	ldi	r25, 0xAF	; 175
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <T+0x44>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <T+0x4a>
 1e8:	00 00       	nop
 1ea:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
 1ee:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x1>
 1f2:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <__data_end+0x2>
 1f6:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <__data_end+0x3>
 1fa:	81 3b       	cpi	r24, 0xB1	; 177
 1fc:	94 40       	sbci	r25, 0x04	; 4
 1fe:	a1 05       	cpc	r26, r1
 200:	b1 05       	cpc	r27, r1
 202:	4c f4       	brge	.+18     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9d e0       	ldi	r25, 0x0D	; 13
 208:	23 e0       	ldi	r18, 0x03	; 3
 20a:	81 50       	subi	r24, 0x01	; 1
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <USART_TxChar>:
 218:	5d 9b       	sbis	0x0b, 5	; 11
 21a:	fe cf       	rjmp	.-4      	; 0x218 <USART_TxChar>
 21c:	8c b9       	out	0x0c, r24	; 12
 21e:	08 95       	ret

00000220 <USART_Send>:
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	8c 01       	movw	r16, r24
 22a:	c0 e0       	ldi	r28, 0x00	; 0
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	05 c0       	rjmp	.+10     	; 0x23a <USART_Send+0x1a>
 230:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 234:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	f8 01       	movw	r30, r16
 23c:	ec 0f       	add	r30, r28
 23e:	fd 1f       	adc	r31, r29
 240:	80 81       	ld	r24, Z
 242:	81 11       	cpse	r24, r1
 244:	f5 cf       	rjmp	.-22     	; 0x230 <USART_Send+0x10>
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <USART_Send_ESS>:
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	8c 01       	movw	r16, r24
 25e:	7b 01       	movw	r14, r22
 260:	c0 e0       	ldi	r28, 0x00	; 0
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	09 c0       	rjmp	.+18     	; 0x278 <USART_Send_ESS+0x28>
 266:	f8 01       	movw	r30, r16
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	80 81       	ld	r24, Z
 26e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 272:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	f8 01       	movw	r30, r16
 27a:	01 90       	ld	r0, Z+
 27c:	00 20       	and	r0, r0
 27e:	e9 f7       	brne	.-6      	; 0x27a <USART_Send_ESS+0x2a>
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	e0 1b       	sub	r30, r16
 284:	f1 0b       	sbc	r31, r17
 286:	ce 17       	cp	r28, r30
 288:	df 07       	cpc	r29, r31
 28a:	68 f3       	brcs	.-38     	; 0x266 <USART_Send_ESS+0x16>
 28c:	ea 94       	dec	r14
 28e:	ef 28       	or	r14, r15
 290:	79 f4       	brne	.+30     	; 0x2b0 <USART_Send_ESS+0x60>
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 298:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 29c:	8c e7       	ldi	r24, 0x7C	; 124
 29e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 2a2:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 2a6:	85 e4       	ldi	r24, 0x45	; 69
 2a8:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 2ac:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	08 95       	ret

000002be <USART_Int_Str>:
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	eb 01       	movw	r28, r22
 2c4:	4a e0       	ldi	r20, 0x0A	; 10
 2c6:	66 e4       	ldi	r22, 0x46	; 70
 2c8:	71 e0       	ldi	r23, 0x01	; 1
 2ca:	0e 94 a9 06 	call	0xd52	; 0xd52 <__itoa_ncheck>
 2ce:	be 01       	movw	r22, r28
 2d0:	86 e4       	ldi	r24, 0x46	; 70
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 28 01 	call	0x250	; 0x250 <USART_Send_ESS>
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <USART_Int_StrHEXRAW>:
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
 2e8:	8b 01       	movw	r16, r22
 2ea:	40 e1       	ldi	r20, 0x10	; 16
 2ec:	66 e4       	ldi	r22, 0x46	; 70
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	0e 94 a9 06 	call	0xd52	; 0xd52 <__itoa_ncheck>
 2f4:	60 97       	sbiw	r28, 0x10	; 16
 2f6:	34 f4       	brge	.+12     	; 0x304 <USART_Int_StrHEXRAW+0x26>
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	83 e6       	ldi	r24, 0x63	; 99
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 28 01 	call	0x250	; 0x250 <USART_Send_ESS>
 304:	b8 01       	movw	r22, r16
 306:	86 e4       	ldi	r24, 0x46	; 70
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 28 01 	call	0x250	; 0x250 <USART_Send_ESS>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <USART_Long_Str>:
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	ea 01       	movw	r28, r20
 31e:	2a e0       	ldi	r18, 0x0A	; 10
 320:	46 e4       	ldi	r20, 0x46	; 70
 322:	51 e0       	ldi	r21, 0x01	; 1
 324:	0e 94 b4 06 	call	0xd68	; 0xd68 <__ltoa_ncheck>
 328:	be 01       	movw	r22, r28
 32a:	86 e4       	ldi	r24, 0x46	; 70
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 28 01 	call	0x250	; 0x250 <USART_Send_ESS>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <CheckRx>:
 338:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <RXSBWP>
 33c:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <RXSBWP+0x1>
 340:	fa 01       	movw	r30, r20
 342:	eb 53       	subi	r30, 0x3B	; 59
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	80 81       	ld	r24, Z
 348:	8c 37       	cpi	r24, 0x7C	; 124
 34a:	71 f5       	brne	.+92     	; 0x3a8 <CheckRx+0x70>
 34c:	fa 01       	movw	r30, r20
 34e:	ea 53       	subi	r30, 0x3A	; 58
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	80 81       	ld	r24, Z
 354:	85 34       	cpi	r24, 0x45	; 69
 356:	41 f5       	brne	.+80     	; 0x3a8 <CheckRx+0x70>
 358:	80 e8       	ldi	r24, 0x80	; 128
 35a:	eb e5       	ldi	r30, 0x5B	; 91
 35c:	f3 e0       	ldi	r31, 0x03	; 3
 35e:	df 01       	movw	r26, r30
 360:	1d 92       	st	X+, r1
 362:	8a 95       	dec	r24
 364:	e9 f7       	brne	.-6      	; 0x360 <CheckRx+0x28>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	09 c0       	rjmp	.+18     	; 0x37e <CheckRx+0x46>
 36c:	fc 01       	movw	r30, r24
 36e:	ea 53       	subi	r30, 0x3A	; 58
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	20 81       	ld	r18, Z
 374:	fc 01       	movw	r30, r24
 376:	e6 5a       	subi	r30, 0xA6	; 166
 378:	fc 4f       	sbci	r31, 0xFC	; 252
 37a:	20 83       	st	Z, r18
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	9a 01       	movw	r18, r20
 380:	23 50       	subi	r18, 0x03	; 3
 382:	31 09       	sbc	r19, r1
 384:	28 17       	cp	r18, r24
 386:	39 07       	cpc	r19, r25
 388:	8c f7       	brge	.-30     	; 0x36c <CheckRx+0x34>
 38a:	92 b3       	in	r25, 0x12	; 18
 38c:	88 e0       	ldi	r24, 0x08	; 8
 38e:	89 27       	eor	r24, r25
 390:	82 bb       	out	0x12, r24	; 18
 392:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <RXSBWP+0x1>
 396:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <RXSBWP>
 39a:	80 e8       	ldi	r24, 0x80	; 128
 39c:	e6 ec       	ldi	r30, 0xC6	; 198
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	df 01       	movw	r26, r30
 3a2:	1d 92       	st	X+, r1
 3a4:	8a 95       	dec	r24
 3a6:	e9 f7       	brne	.-6      	; 0x3a2 <CheckRx+0x6a>
 3a8:	08 95       	ret

000003aa <__vector_11>:
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	4f 93       	push	r20
 3ba:	5f 93       	push	r21
 3bc:	6f 93       	push	r22
 3be:	7f 93       	push	r23
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	af 93       	push	r26
 3c6:	bf 93       	push	r27
 3c8:	ef 93       	push	r30
 3ca:	ff 93       	push	r31
 3cc:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <RXSBWP>
 3d0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <RXSBWP+0x1>
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <RXSBWP+0x1>
 3da:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <RXSBWP>
 3de:	2c b1       	in	r18, 0x0c	; 12
 3e0:	fc 01       	movw	r30, r24
 3e2:	ea 53       	subi	r30, 0x3A	; 58
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	20 83       	st	Z, r18
 3e8:	0e 94 9c 01 	call	0x338	; 0x338 <CheckRx>
 3ec:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <RXSBWP>
 3f0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <RXSBWP+0x1>
 3f4:	80 38       	cpi	r24, 0x80	; 128
 3f6:	91 05       	cpc	r25, r1
 3f8:	24 f0       	brlt	.+8      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3fa:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <RXSBWP+0x1>
 3fe:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <RXSBWP>
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <SPI_MAST_Init>:
 424:	0f 93       	push	r16
 426:	e7 b3       	in	r30, 0x17	; 23
 428:	ef 7b       	andi	r30, 0xBF	; 191
 42a:	e7 bb       	out	0x17, r30	; 23
 42c:	e7 b3       	in	r30, 0x17	; 23
 42e:	e0 62       	ori	r30, 0x20	; 32
 430:	e7 bb       	out	0x17, r30	; 23
 432:	e7 b3       	in	r30, 0x17	; 23
 434:	e0 61       	ori	r30, 0x10	; 16
 436:	e7 bb       	out	0x17, r30	; 23
 438:	e7 b3       	in	r30, 0x17	; 23
 43a:	e0 68       	ori	r30, 0x80	; 128
 43c:	e7 bb       	out	0x17, r30	; 23
 43e:	0e b9       	out	0x0e, r16	; 14
 440:	1d b8       	out	0x0d, r1	; 13
 442:	ed b1       	in	r30, 0x0d	; 13
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	82 95       	swap	r24
 44a:	92 95       	swap	r25
 44c:	90 7f       	andi	r25, 0xF0	; 240
 44e:	98 27       	eor	r25, r24
 450:	80 7f       	andi	r24, 0xF0	; 240
 452:	98 27       	eor	r25, r24
 454:	8e 2b       	or	r24, r30
 456:	8d b9       	out	0x0d, r24	; 13
 458:	8d b1       	in	r24, 0x0d	; 13
 45a:	44 0f       	add	r20, r20
 45c:	55 1f       	adc	r21, r21
 45e:	44 0f       	add	r20, r20
 460:	55 1f       	adc	r21, r21
 462:	44 0f       	add	r20, r20
 464:	55 1f       	adc	r21, r21
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	22 0f       	add	r18, r18
 46c:	33 1f       	adc	r19, r19
 46e:	40 6c       	ori	r20, 0xC0	; 192
 470:	24 2b       	or	r18, r20
 472:	28 2b       	or	r18, r24
 474:	20 61       	ori	r18, 0x10	; 16
 476:	2d b9       	out	0x0d, r18	; 13
 478:	60 31       	cpi	r22, 0x10	; 16
 47a:	71 05       	cpc	r23, r1
 47c:	99 f0       	breq	.+38     	; 0x4a4 <__stack+0x45>
 47e:	24 f4       	brge	.+8      	; 0x488 <__stack+0x29>
 480:	64 30       	cpi	r22, 0x04	; 4
 482:	71 05       	cpc	r23, r1
 484:	41 f0       	breq	.+16     	; 0x496 <__stack+0x37>
 486:	22 c0       	rjmp	.+68     	; 0x4cc <__stack+0x6d>
 488:	60 34       	cpi	r22, 0x40	; 64
 48a:	71 05       	cpc	r23, r1
 48c:	91 f0       	breq	.+36     	; 0x4b2 <__stack+0x53>
 48e:	60 38       	cpi	r22, 0x80	; 128
 490:	71 05       	cpc	r23, r1
 492:	b1 f0       	breq	.+44     	; 0x4c0 <__stack+0x61>
 494:	1b c0       	rjmp	.+54     	; 0x4cc <__stack+0x6d>
 496:	8d b1       	in	r24, 0x0d	; 13
 498:	8d 7f       	andi	r24, 0xFD	; 253
 49a:	8d b9       	out	0x0d, r24	; 13
 49c:	8d b1       	in	r24, 0x0d	; 13
 49e:	8e 7f       	andi	r24, 0xFE	; 254
 4a0:	8d b9       	out	0x0d, r24	; 13
 4a2:	14 c0       	rjmp	.+40     	; 0x4cc <__stack+0x6d>
 4a4:	8d b1       	in	r24, 0x0d	; 13
 4a6:	8d 7f       	andi	r24, 0xFD	; 253
 4a8:	8d b9       	out	0x0d, r24	; 13
 4aa:	8d b1       	in	r24, 0x0d	; 13
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	8d b9       	out	0x0d, r24	; 13
 4b0:	0d c0       	rjmp	.+26     	; 0x4cc <__stack+0x6d>
 4b2:	8d b1       	in	r24, 0x0d	; 13
 4b4:	82 60       	ori	r24, 0x02	; 2
 4b6:	8d b9       	out	0x0d, r24	; 13
 4b8:	8d b1       	in	r24, 0x0d	; 13
 4ba:	8e 7f       	andi	r24, 0xFE	; 254
 4bc:	8d b9       	out	0x0d, r24	; 13
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <__stack+0x6d>
 4c0:	8d b1       	in	r24, 0x0d	; 13
 4c2:	82 60       	ori	r24, 0x02	; 2
 4c4:	8d b9       	out	0x0d, r24	; 13
 4c6:	8d b1       	in	r24, 0x0d	; 13
 4c8:	81 60       	ori	r24, 0x01	; 1
 4ca:	8d b9       	out	0x0d, r24	; 13
 4cc:	0f 91       	pop	r16
 4ce:	08 95       	ret

000004d0 <SPI_Write>:
 4d0:	e7 e8       	ldi	r30, 0x87	; 135
 4d2:	f3 e1       	ldi	r31, 0x13	; 19
 4d4:	31 97       	sbiw	r30, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <SPI_Write+0x4>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <SPI_Write+0xa>
 4da:	00 00       	nop
 4dc:	8f b9       	out	0x0f, r24	; 15
 4de:	77 9b       	sbis	0x0e, 7	; 14
 4e0:	fe cf       	rjmp	.-4      	; 0x4de <SPI_Write+0xe>
 4e2:	8f b1       	in	r24, 0x0f	; 15
 4e4:	08 95       	ret

000004e6 <SPI_transfer>:
 4e6:	8f b9       	out	0x0f, r24	; 15
 4e8:	77 9b       	sbis	0x0e, 7	; 14
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <SPI_transfer+0x2>
 4ec:	8f b1       	in	r24, 0x0f	; 15
 4ee:	08 95       	ret

000004f0 <SD_Command>:
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	d4 2f       	mov	r29, r20
 4fc:	15 2f       	mov	r17, r21
 4fe:	06 2f       	mov	r16, r22
 500:	f7 2e       	mov	r15, r23
 502:	c2 2f       	mov	r28, r18
 504:	80 64       	ori	r24, 0x40	; 64
 506:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SPI_Write>
 50a:	8f 2d       	mov	r24, r15
 50c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SPI_Write>
 510:	80 2f       	mov	r24, r16
 512:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SPI_Write>
 516:	81 2f       	mov	r24, r17
 518:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SPI_Write>
 51c:	8d 2f       	mov	r24, r29
 51e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SPI_Write>
 522:	8c 2f       	mov	r24, r28
 524:	81 60       	ori	r24, 0x01	; 1
 526:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SPI_Write>
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	ff 90       	pop	r15
 534:	08 95       	ret

00000536 <SD_powerUpSeq>:
 536:	cf 93       	push	r28
 538:	8b b3       	in	r24, 0x1b	; 27
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	8b bb       	out	0x1b, r24	; 27
 53e:	87 e8       	ldi	r24, 0x87	; 135
 540:	93 e1       	ldi	r25, 0x13	; 19
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <SD_powerUpSeq+0xc>
 546:	00 c0       	rjmp	.+0      	; 0x548 <SD_powerUpSeq+0x12>
 548:	00 00       	nop
 54a:	c0 e0       	ldi	r28, 0x00	; 0
 54c:	07 c0       	rjmp	.+14     	; 0x55c <SD_powerUpSeq+0x26>
 54e:	8b b3       	in	r24, 0x1b	; 27
 550:	8e 7f       	andi	r24, 0xFE	; 254
 552:	8b bb       	out	0x1b, r24	; 27
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SPI_Write>
 55a:	cf 5f       	subi	r28, 0xFF	; 255
 55c:	ca 30       	cpi	r28, 0x0A	; 10
 55e:	b8 f3       	brcs	.-18     	; 0x54e <SD_powerUpSeq+0x18>
 560:	8b b3       	in	r24, 0x1b	; 27
 562:	81 60       	ori	r24, 0x01	; 1
 564:	8b bb       	out	0x1b, r24	; 27
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SPI_Write>
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <SD_readRes1>:
 570:	cf 93       	push	r28
 572:	c0 e0       	ldi	r28, 0x00	; 0
 574:	03 c0       	rjmp	.+6      	; 0x57c <SD_readRes1+0xc>
 576:	cf 5f       	subi	r28, 0xFF	; 255
 578:	c9 30       	cpi	r28, 0x09	; 9
 57a:	30 f4       	brcc	.+12     	; 0x588 <SD_readRes1+0x18>
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 582:	8f 3f       	cpi	r24, 0xFF	; 255
 584:	c1 f3       	breq	.-16     	; 0x576 <SD_readRes1+0x6>
 586:	01 c0       	rjmp	.+2      	; 0x58a <SD_readRes1+0x1a>
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <SD_goIdleState>:
 58e:	cf 93       	push	r28
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 596:	8b b3       	in	r24, 0x1b	; 27
 598:	8e 7f       	andi	r24, 0xFE	; 254
 59a:	8b bb       	out	0x1b, r24	; 27
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 5a2:	24 e9       	ldi	r18, 0x94	; 148
 5a4:	40 e0       	ldi	r20, 0x00	; 0
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	ba 01       	movw	r22, r20
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SD_Command>
 5b0:	0e 94 b8 02 	call	0x570	; 0x570 <SD_readRes1>
 5b4:	c8 2f       	mov	r28, r24
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 5bc:	8b b3       	in	r24, 0x1b	; 27
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	8b bb       	out	0x1b, r24	; 27
 5c2:	8f ef       	ldi	r24, 0xFF	; 255
 5c4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 5c8:	8c 2f       	mov	r24, r28
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <SD_readRes7>:
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	ec 01       	movw	r28, r24
 5d4:	0e 94 b8 02 	call	0x570	; 0x570 <SD_readRes1>
 5d8:	88 83       	st	Y, r24
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	80 f4       	brcc	.+32     	; 0x5fe <SD_readRes7+0x30>
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 5e4:	89 83       	std	Y+1, r24	; 0x01
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 5ec:	8a 83       	std	Y+2, r24	; 0x02
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 5f4:	8b 83       	std	Y+3, r24	; 0x03
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 5fc:	8c 83       	std	Y+4, r24	; 0x04
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <SD_sendIfCond>:
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	ec 01       	movw	r28, r24
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 610:	8b b3       	in	r24, 0x1b	; 27
 612:	8e 7f       	andi	r24, 0xFE	; 254
 614:	8b bb       	out	0x1b, r24	; 27
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 61c:	26 e8       	ldi	r18, 0x86	; 134
 61e:	4a ea       	ldi	r20, 0xAA	; 170
 620:	51 e0       	ldi	r21, 0x01	; 1
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	88 e0       	ldi	r24, 0x08	; 8
 628:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SD_Command>
 62c:	ce 01       	movw	r24, r28
 62e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <SD_readRes7>
 632:	8f ef       	ldi	r24, 0xFF	; 255
 634:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 638:	8b b3       	in	r24, 0x1b	; 27
 63a:	81 60       	ori	r24, 0x01	; 1
 63c:	8b bb       	out	0x1b, r24	; 27
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <SD_readOCR>:
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	ec 01       	movw	r28, r24
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 656:	8b b3       	in	r24, 0x1b	; 27
 658:	8e 7f       	andi	r24, 0xFE	; 254
 65a:	8b bb       	out	0x1b, r24	; 27
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	40 e0       	ldi	r20, 0x00	; 0
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	ba 01       	movw	r22, r20
 66a:	8a e3       	ldi	r24, 0x3A	; 58
 66c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SD_Command>
 670:	ce 01       	movw	r24, r28
 672:	0e 94 e7 02 	call	0x5ce	; 0x5ce <SD_readRes7>
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 67c:	8b b3       	in	r24, 0x1b	; 27
 67e:	81 60       	ori	r24, 0x01	; 1
 680:	8b bb       	out	0x1b, r24	; 27
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	08 95       	ret

0000068e <SD_sendApp>:
 68e:	cf 93       	push	r28
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 696:	8b b3       	in	r24, 0x1b	; 27
 698:	8e 7f       	andi	r24, 0xFE	; 254
 69a:	8b bb       	out	0x1b, r24	; 27
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	ba 01       	movw	r22, r20
 6aa:	87 e3       	ldi	r24, 0x37	; 55
 6ac:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SD_Command>
 6b0:	0e 94 b8 02 	call	0x570	; 0x570 <SD_readRes1>
 6b4:	c8 2f       	mov	r28, r24
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 6bc:	8b b3       	in	r24, 0x1b	; 27
 6be:	81 60       	ori	r24, 0x01	; 1
 6c0:	8b bb       	out	0x1b, r24	; 27
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 6c8:	8c 2f       	mov	r24, r28
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret

000006ce <SD_sendOpCond>:
 6ce:	cf 93       	push	r28
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 6d6:	8b b3       	in	r24, 0x1b	; 27
 6d8:	8e 7f       	andi	r24, 0xFE	; 254
 6da:	8b bb       	out	0x1b, r24	; 27
 6dc:	8f ef       	ldi	r24, 0xFF	; 255
 6de:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 6e2:	20 e0       	ldi	r18, 0x00	; 0
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	70 e4       	ldi	r23, 0x40	; 64
 6ec:	89 e2       	ldi	r24, 0x29	; 41
 6ee:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SD_Command>
 6f2:	0e 94 b8 02 	call	0x570	; 0x570 <SD_readRes1>
 6f6:	c8 2f       	mov	r28, r24
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 6fe:	8b b3       	in	r24, 0x1b	; 27
 700:	81 60       	ori	r24, 0x01	; 1
 702:	8b bb       	out	0x1b, r24	; 27
 704:	8f ef       	ldi	r24, 0xFF	; 255
 706:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 70a:	8c 2f       	mov	r24, r28
 70c:	cf 91       	pop	r28
 70e:	08 95       	ret

00000710 <SD_Init>:
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	00 d0       	rcall	.+0      	; 0x71a <SD_Init+0xa>
 71a:	00 d0       	rcall	.+0      	; 0x71c <SD_Init+0xc>
 71c:	1f 92       	push	r1
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
 722:	0e 94 9b 02 	call	0x536	; 0x536 <SD_powerUpSeq>
 726:	00 e0       	ldi	r16, 0x00	; 0
 728:	03 c0       	rjmp	.+6      	; 0x730 <SD_Init+0x20>
 72a:	0f 5f       	subi	r16, 0xFF	; 255
 72c:	0b 30       	cpi	r16, 0x0B	; 11
 72e:	70 f5       	brcc	.+92     	; 0x78c <SD_Init+0x7c>
 730:	0e 94 c7 02 	call	0x58e	; 0x58e <SD_goIdleState>
 734:	18 2f       	mov	r17, r24
 736:	89 83       	std	Y+1, r24	; 0x01
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	b9 f7       	brne	.-18     	; 0x72a <SD_Init+0x1a>
 73c:	ce 01       	movw	r24, r28
 73e:	01 96       	adiw	r24, 0x01	; 1
 740:	0e 94 02 03 	call	0x604	; 0x604 <SD_sendIfCond>
 744:	89 81       	ldd	r24, Y+1	; 0x01
 746:	81 30       	cpi	r24, 0x01	; 1
 748:	41 f5       	brne	.+80     	; 0x79a <SD_Init+0x8a>
 74a:	8d 81       	ldd	r24, Y+5	; 0x05
 74c:	8a 3a       	cpi	r24, 0xAA	; 170
 74e:	01 f5       	brne	.+64     	; 0x790 <SD_Init+0x80>
 750:	10 e0       	ldi	r17, 0x00	; 0
 752:	15 36       	cpi	r17, 0x65	; 101
 754:	f8 f4       	brcc	.+62     	; 0x794 <SD_Init+0x84>
 756:	0e 94 47 03 	call	0x68e	; 0x68e <SD_sendApp>
 75a:	89 83       	std	Y+1, r24	; 0x01
 75c:	82 30       	cpi	r24, 0x02	; 2
 75e:	18 f4       	brcc	.+6      	; 0x766 <SD_Init+0x56>
 760:	0e 94 67 03 	call	0x6ce	; 0x6ce <SD_sendOpCond>
 764:	89 83       	std	Y+1, r24	; 0x01
 766:	8f e4       	ldi	r24, 0x4F	; 79
 768:	93 ec       	ldi	r25, 0xC3	; 195
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	f1 f7       	brne	.-4      	; 0x76a <SD_Init+0x5a>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <SD_Init+0x60>
 770:	00 00       	nop
 772:	1f 5f       	subi	r17, 0xFF	; 255
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	81 11       	cpse	r24, r1
 778:	ec cf       	rjmp	.-40     	; 0x752 <SD_Init+0x42>
 77a:	ce 01       	movw	r24, r28
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	0e 94 25 03 	call	0x64a	; 0x64a <SD_readOCR>
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	88 23       	and	r24, r24
 786:	44 f0       	brlt	.+16     	; 0x798 <SD_Init+0x88>
 788:	14 e0       	ldi	r17, 0x04	; 4
 78a:	07 c0       	rjmp	.+14     	; 0x79a <SD_Init+0x8a>
 78c:	10 e0       	ldi	r17, 0x00	; 0
 78e:	05 c0       	rjmp	.+10     	; 0x79a <SD_Init+0x8a>
 790:	12 e0       	ldi	r17, 0x02	; 2
 792:	03 c0       	rjmp	.+6      	; 0x79a <SD_Init+0x8a>
 794:	13 e0       	ldi	r17, 0x03	; 3
 796:	01 c0       	rjmp	.+2      	; 0x79a <SD_Init+0x8a>
 798:	15 e0       	ldi	r17, 0x05	; 5
 79a:	81 2f       	mov	r24, r17
 79c:	0f 90       	pop	r0
 79e:	0f 90       	pop	r0
 7a0:	0f 90       	pop	r0
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	08 95       	ret

000007b0 <SD_RSB>:
 7b0:	4f 92       	push	r4
 7b2:	5f 92       	push	r5
 7b4:	6f 92       	push	r6
 7b6:	7f 92       	push	r7
 7b8:	af 92       	push	r10
 7ba:	bf 92       	push	r11
 7bc:	cf 92       	push	r12
 7be:	df 92       	push	r13
 7c0:	ff 92       	push	r15
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	6c 01       	movw	r12, r24
 7cc:	2a 01       	movw	r4, r20
 7ce:	3b 01       	movw	r6, r22
 7d0:	59 01       	movw	r10, r18
 7d2:	8f ef       	ldi	r24, 0xFF	; 255
 7d4:	f9 01       	movw	r30, r18
 7d6:	80 83       	st	Z, r24
 7d8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 7dc:	8b b3       	in	r24, 0x1b	; 27
 7de:	8e 7f       	andi	r24, 0xFE	; 254
 7e0:	8b bb       	out	0x1b, r24	; 27
 7e2:	8f ef       	ldi	r24, 0xFF	; 255
 7e4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	b3 01       	movw	r22, r6
 7ec:	a2 01       	movw	r20, r4
 7ee:	81 e1       	ldi	r24, 0x11	; 17
 7f0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SD_Command>
 7f4:	0e 94 b8 02 	call	0x570	; 0x570 <SD_readRes1>
 7f8:	8f 3f       	cpi	r24, 0xFF	; 255
 7fa:	49 f4       	brne	.+18     	; 0x80e <SD_RSB+0x5e>
 7fc:	2b c0       	rjmp	.+86     	; 0x854 <SD_RSB+0xa4>
 7fe:	8f ef       	ldi	r24, 0xFF	; 255
 800:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 804:	f8 2e       	mov	r15, r24
 806:	fe ef       	ldi	r31, 0xFE	; 254
 808:	8f 13       	cpse	r24, r31
 80a:	03 c0       	rjmp	.+6      	; 0x812 <SD_RSB+0x62>
 80c:	07 c0       	rjmp	.+14     	; 0x81c <SD_RSB+0x6c>
 80e:	c0 e0       	ldi	r28, 0x00	; 0
 810:	d0 e0       	ldi	r29, 0x00	; 0
 812:	21 96       	adiw	r28, 0x01	; 1
 814:	c4 32       	cpi	r28, 0x24	; 36
 816:	84 ef       	ldi	r24, 0xF4	; 244
 818:	d8 07       	cpc	r29, r24
 81a:	89 f7       	brne	.-30     	; 0x7fe <SD_RSB+0x4e>
 81c:	ee ef       	ldi	r30, 0xFE	; 254
 81e:	fe 12       	cpse	r15, r30
 820:	17 c0       	rjmp	.+46     	; 0x850 <SD_RSB+0xa0>
 822:	0a c0       	rjmp	.+20     	; 0x838 <SD_RSB+0x88>
 824:	86 01       	movw	r16, r12
 826:	0c 0f       	add	r16, r28
 828:	1d 1f       	adc	r17, r29
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 830:	f8 01       	movw	r30, r16
 832:	80 83       	st	Z, r24
 834:	21 96       	adiw	r28, 0x01	; 1
 836:	02 c0       	rjmp	.+4      	; 0x83c <SD_RSB+0x8c>
 838:	c0 e0       	ldi	r28, 0x00	; 0
 83a:	d0 e0       	ldi	r29, 0x00	; 0
 83c:	c1 15       	cp	r28, r1
 83e:	f2 e0       	ldi	r31, 0x02	; 2
 840:	df 07       	cpc	r29, r31
 842:	80 f3       	brcs	.-32     	; 0x824 <SD_RSB+0x74>
 844:	8f ef       	ldi	r24, 0xFF	; 255
 846:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 84a:	8f ef       	ldi	r24, 0xFF	; 255
 84c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_transfer>
 850:	f5 01       	movw	r30, r10
 852:	f0 82       	st	Z, r15
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	1f 91       	pop	r17
 85a:	0f 91       	pop	r16
 85c:	ff 90       	pop	r15
 85e:	df 90       	pop	r13
 860:	cf 90       	pop	r12
 862:	bf 90       	pop	r11
 864:	af 90       	pop	r10
 866:	7f 90       	pop	r7
 868:	6f 90       	pop	r6
 86a:	5f 90       	pop	r5
 86c:	4f 90       	pop	r4
 86e:	08 95       	ret

00000870 <FAT32_Init>:

long RootDirSec;
char MBR=0;
char FSInfo = 1; 

char FAT32_Init(){
 870:	0f 93       	push	r16
 872:	1f 93       	push	r17
	SD_RSB(StatusBuff,0,&token);
 874:	23 ee       	ldi	r18, 0xE3	; 227
 876:	33 e0       	ldi	r19, 0x03	; 3
 878:	40 e0       	ldi	r20, 0x00	; 0
 87a:	50 e0       	ldi	r21, 0x00	; 0
 87c:	ba 01       	movw	r22, r20
 87e:	8c e5       	ldi	r24, 0x5C	; 92
 880:	91 e0       	ldi	r25, 0x01	; 1
 882:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <SD_RSB>

	if((StatusBuff[510]==0x55)&&(StatusBuff[511]==0xAA)){
 886:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <StatusBuff+0x1fe>
 88a:	85 35       	cpi	r24, 0x55	; 85
 88c:	09 f0       	breq	.+2      	; 0x890 <FAT32_Init+0x20>
 88e:	4a c0       	rjmp	.+148    	; 0x924 <FAT32_Init+0xb4>
 890:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <RXSB>
 894:	8a 3a       	cpi	r24, 0xAA	; 170
 896:	09 f0       	breq	.+2      	; 0x89a <FAT32_Init+0x2a>
 898:	45 c0       	rjmp	.+138    	; 0x924 <FAT32_Init+0xb4>
		USART_Send("\r\n Valid");
 89a:	85 e6       	ldi	r24, 0x65	; 101
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
	}else{return 0;}
RootDirSec = (StatusBuff[15]*256+StatusBuff[14])+ (( (StatusBuff[38]*65536) + ((unsigned) StatusBuff[37]*256) + (StatusBuff[36])) *StatusBuff[16]);
 8a2:	ac e5       	ldi	r26, 0x5C	; 92
 8a4:	b1 e0       	ldi	r27, 0x01	; 1
 8a6:	1f 96       	adiw	r26, 0x0f	; 15
 8a8:	ec 91       	ld	r30, X
 8aa:	1f 97       	sbiw	r26, 0x0f	; 15
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	fe 2f       	mov	r31, r30
 8b0:	ee 27       	eor	r30, r30
 8b2:	1e 96       	adiw	r26, 0x0e	; 14
 8b4:	8c 91       	ld	r24, X
 8b6:	1e 97       	sbiw	r26, 0x0e	; 14
 8b8:	e8 0f       	add	r30, r24
 8ba:	f1 1d       	adc	r31, r1
 8bc:	96 96       	adiw	r26, 0x26	; 38
 8be:	2c 91       	ld	r18, X
 8c0:	96 97       	sbiw	r26, 0x26	; 38
 8c2:	42 2f       	mov	r20, r18
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	ba 01       	movw	r22, r20
 8cc:	55 27       	eor	r21, r21
 8ce:	44 27       	eor	r20, r20
 8d0:	95 96       	adiw	r26, 0x25	; 37
 8d2:	8c 91       	ld	r24, X
 8d4:	95 97       	sbiw	r26, 0x25	; 37
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	98 2f       	mov	r25, r24
 8da:	88 27       	eor	r24, r24
 8dc:	48 0f       	add	r20, r24
 8de:	59 1f       	adc	r21, r25
 8e0:	61 1d       	adc	r22, r1
 8e2:	71 1d       	adc	r23, r1
 8e4:	94 96       	adiw	r26, 0x24	; 36
 8e6:	8c 91       	ld	r24, X
 8e8:	94 97       	sbiw	r26, 0x24	; 36
 8ea:	9a 01       	movw	r18, r20
 8ec:	ab 01       	movw	r20, r22
 8ee:	28 0f       	add	r18, r24
 8f0:	31 1d       	adc	r19, r1
 8f2:	41 1d       	adc	r20, r1
 8f4:	51 1d       	adc	r21, r1
 8f6:	50 96       	adiw	r26, 0x10	; 16
 8f8:	ac 91       	ld	r26, X
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__muluhisi3>
 900:	8f 01       	movw	r16, r30
 902:	ff 0f       	add	r31, r31
 904:	22 0b       	sbc	r18, r18
 906:	33 0b       	sbc	r19, r19
 908:	dc 01       	movw	r26, r24
 90a:	cb 01       	movw	r24, r22
 90c:	80 0f       	add	r24, r16
 90e:	91 1f       	adc	r25, r17
 910:	a2 1f       	adc	r26, r18
 912:	b3 1f       	adc	r27, r19
 914:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <RootDirSec>
 918:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <RootDirSec+0x1>
 91c:	a0 93 dd 03 	sts	0x03DD, r26	; 0x8003dd <RootDirSec+0x2>
 920:	b0 93 de 03 	sts	0x03DE, r27	; 0x8003de <RootDirSec+0x3>
return 0;
}
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	1f 91       	pop	r17
 928:	0f 91       	pop	r16
 92a:	08 95       	ret

0000092c <FAT32_Open_File>:


void FAT32_Open_File(char str[]){
 92c:	af 92       	push	r10
 92e:	bf 92       	push	r11
 930:	cf 92       	push	r12
 932:	df 92       	push	r13
 934:	ef 92       	push	r14
 936:	ff 92       	push	r15
 938:	0f 93       	push	r16
 93a:	1f 93       	push	r17
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	ec 01       	movw	r28, r24
char locX =0;
char locI =0;	
short flag=1;
char Attr =0;
//uint32_t Clust;
RDS = RootDirSec; 
 942:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <RootDirSec>
 946:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <RootDirSec+0x1>
 94a:	a0 91 dd 03 	lds	r26, 0x03DD	; 0x8003dd <RootDirSec+0x2>
 94e:	b0 91 de 03 	lds	r27, 0x03DE	; 0x8003de <RootDirSec+0x3>
 952:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <RDS>
 956:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <RDS+0x1>
 95a:	a0 93 e1 03 	sts	0x03E1, r26	; 0x8003e1 <RDS+0x2>
 95e:	b0 93 e2 03 	sts	0x03E2, r27	; 0x8003e2 <RDS+0x3>
//Find Location of file 
	for (int i=0; i<0xFFFF; i++){
 962:	e1 2c       	mov	r14, r1
 964:	f1 2c       	mov	r15, r1


void FAT32_Open_File(char str[]){
char locX =0;
char locI =0;	
short flag=1;
 966:	01 e0       	ldi	r16, 0x01	; 1
 968:	10 e0       	ldi	r17, 0x00	; 0
}


void FAT32_Open_File(char str[]){
char locX =0;
char locI =0;	
 96a:	c1 2c       	mov	r12, r1
return 0;
}


void FAT32_Open_File(char str[]){
char locX =0;
 96c:	d1 2c       	mov	r13, r1
short flag=1;
char Attr =0;
//uint32_t Clust;
RDS = RootDirSec; 
//Find Location of file 
	for (int i=0; i<0xFFFF; i++){
 96e:	5e c0       	rjmp	.+188    	; 0xa2c <FAT32_Open_File+0x100>
		
		SD_RSB(StatusBuff,RootDirSec+i,&token);
 970:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <RootDirSec>
 974:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <RootDirSec+0x1>
 978:	a0 91 dd 03 	lds	r26, 0x03DD	; 0x8003dd <RootDirSec+0x2>
 97c:	b0 91 de 03 	lds	r27, 0x03DE	; 0x8003de <RootDirSec+0x3>
 980:	a7 01       	movw	r20, r14
 982:	0f 2c       	mov	r0, r15
 984:	00 0c       	add	r0, r0
 986:	66 0b       	sbc	r22, r22
 988:	77 0b       	sbc	r23, r23
 98a:	48 0f       	add	r20, r24
 98c:	59 1f       	adc	r21, r25
 98e:	6a 1f       	adc	r22, r26
 990:	7b 1f       	adc	r23, r27
 992:	23 ee       	ldi	r18, 0xE3	; 227
 994:	33 e0       	ldi	r19, 0x03	; 3
 996:	8c e5       	ldi	r24, 0x5C	; 92
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <SD_RSB>
		for(int x=0; x<= 511; x++){
 99e:	20 e0       	ldi	r18, 0x00	; 0
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	3a c0       	rjmp	.+116    	; 0xa18 <FAT32_Open_File+0xec>
			
			if(StatusBuff[x]==str[0]){
 9a4:	f9 01       	movw	r30, r18
 9a6:	e4 5a       	subi	r30, 0xA4	; 164
 9a8:	fe 4f       	sbci	r31, 0xFE	; 254
 9aa:	90 81       	ld	r25, Z
 9ac:	88 81       	ld	r24, Y
 9ae:	98 13       	cpse	r25, r24
 9b0:	2e c0       	rjmp	.+92     	; 0xa0e <FAT32_Open_File+0xe2>
 9b2:	10 c0       	rjmp	.+32     	; 0x9d4 <FAT32_Open_File+0xa8>
	           flag=1; 
				
				for(int y=0; y <strlen(str); y++){
					if (StatusBuff[x+y]!=str[0+y]){flag=0;}
 9b4:	f9 01       	movw	r30, r18
 9b6:	e8 0f       	add	r30, r24
 9b8:	f9 1f       	adc	r31, r25
 9ba:	e4 5a       	subi	r30, 0xA4	; 164
 9bc:	fe 4f       	sbci	r31, 0xFE	; 254
 9be:	50 81       	ld	r21, Z
 9c0:	fe 01       	movw	r30, r28
 9c2:	e8 0f       	add	r30, r24
 9c4:	f9 1f       	adc	r31, r25
 9c6:	40 81       	ld	r20, Z
 9c8:	54 17       	cp	r21, r20
 9ca:	11 f0       	breq	.+4      	; 0x9d0 <FAT32_Open_File+0xa4>
 9cc:	00 e0       	ldi	r16, 0x00	; 0
 9ce:	10 e0       	ldi	r17, 0x00	; 0
		for(int x=0; x<= 511; x++){
			
			if(StatusBuff[x]==str[0]){
	           flag=1; 
				
				for(int y=0; y <strlen(str); y++){
 9d0:	01 96       	adiw	r24, 0x01	; 1
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <FAT32_Open_File+0xb0>
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	01 e0       	ldi	r16, 0x01	; 1
 9da:	10 e0       	ldi	r17, 0x00	; 0
 9dc:	fe 01       	movw	r30, r28
 9de:	01 90       	ld	r0, Z+
 9e0:	00 20       	and	r0, r0
 9e2:	e9 f7       	brne	.-6      	; 0x9de <FAT32_Open_File+0xb2>
 9e4:	31 97       	sbiw	r30, 0x01	; 1
 9e6:	ec 1b       	sub	r30, r28
 9e8:	fd 0b       	sbc	r31, r29
 9ea:	8e 17       	cp	r24, r30
 9ec:	9f 07       	cpc	r25, r31
 9ee:	10 f3       	brcs	.-60     	; 0x9b4 <FAT32_Open_File+0x88>
					if (StatusBuff[x+y]!=str[0+y]){flag=0;}
				}
				
				if(flag!=0){
 9f0:	01 15       	cp	r16, r1
 9f2:	11 05       	cpc	r17, r1
 9f4:	49 f0       	breq	.+18     	; 0xa08 <FAT32_Open_File+0xdc>
					locX=x;
 9f6:	d2 2e       	mov	r13, r18
					locI=i;
 9f8:	ce 2c       	mov	r12, r14
					USART_Send("\r\nFound\r\n");
 9fa:	8e e6       	ldi	r24, 0x6E	; 110
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
					flag =2;
 a02:	02 e0       	ldi	r16, 0x02	; 2
 a04:	10 e0       	ldi	r17, 0x00	; 0
					break;
 a06:	0c c0       	rjmp	.+24     	; 0xa20 <FAT32_Open_File+0xf4>
				}
		if(flag==2){break;}	
 a08:	02 30       	cpi	r16, 0x02	; 2
 a0a:	11 05       	cpc	r17, r1
 a0c:	49 f0       	breq	.+18     	; 0xa20 <FAT32_Open_File+0xf4>
		}
	if(flag==2){break;}
 a0e:	02 30       	cpi	r16, 0x02	; 2
 a10:	11 05       	cpc	r17, r1
 a12:	31 f0       	breq	.+12     	; 0xa20 <FAT32_Open_File+0xf4>
RDS = RootDirSec; 
//Find Location of file 
	for (int i=0; i<0xFFFF; i++){
		
		SD_RSB(StatusBuff,RootDirSec+i,&token);
		for(int x=0; x<= 511; x++){
 a14:	2f 5f       	subi	r18, 0xFF	; 255
 a16:	3f 4f       	sbci	r19, 0xFF	; 255
 a18:	21 15       	cp	r18, r1
 a1a:	82 e0       	ldi	r24, 0x02	; 2
 a1c:	38 07       	cpc	r19, r24
 a1e:	14 f2       	brlt	.-124    	; 0x9a4 <FAT32_Open_File+0x78>
				}
		if(flag==2){break;}	
		}
	if(flag==2){break;}
	}	
if(flag==2){break;}
 a20:	02 30       	cpi	r16, 0x02	; 2
 a22:	11 05       	cpc	r17, r1
 a24:	41 f0       	breq	.+16     	; 0xa36 <FAT32_Open_File+0x10a>
short flag=1;
char Attr =0;
//uint32_t Clust;
RDS = RootDirSec; 
//Find Location of file 
	for (int i=0; i<0xFFFF; i++){
 a26:	9f ef       	ldi	r25, 0xFF	; 255
 a28:	e9 1a       	sub	r14, r25
 a2a:	f9 0a       	sbc	r15, r25
 a2c:	ef ef       	ldi	r30, 0xFF	; 255
 a2e:	ee 16       	cp	r14, r30
 a30:	fe 06       	cpc	r15, r30
 a32:	09 f0       	breq	.+2      	; 0xa36 <FAT32_Open_File+0x10a>
 a34:	9d cf       	rjmp	.-198    	; 0x970 <FAT32_Open_File+0x44>
	if(flag==2){break;}
	}	
if(flag==2){break;}
}

if(flag !=0){
 a36:	01 2b       	or	r16, r17
 a38:	09 f4       	brne	.+2      	; 0xa3c <FAT32_Open_File+0x110>
 a3a:	0c c1       	rjmp	.+536    	; 0xc54 <FAT32_Open_File+0x328>
SD_RSB(StatusBuff,RootDirSec+locI,&token);
 a3c:	40 91 db 03 	lds	r20, 0x03DB	; 0x8003db <RootDirSec>
 a40:	50 91 dc 03 	lds	r21, 0x03DC	; 0x8003dc <RootDirSec+0x1>
 a44:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <RootDirSec+0x2>
 a48:	70 91 de 03 	lds	r23, 0x03DE	; 0x8003de <RootDirSec+0x3>
 a4c:	4c 0d       	add	r20, r12
 a4e:	51 1d       	adc	r21, r1
 a50:	61 1d       	adc	r22, r1
 a52:	71 1d       	adc	r23, r1
 a54:	23 ee       	ldi	r18, 0xE3	; 227
 a56:	33 e0       	ldi	r19, 0x03	; 3
 a58:	8c e5       	ldi	r24, 0x5C	; 92
 a5a:	91 e0       	ldi	r25, 0x01	; 1
 a5c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <SD_RSB>
Attr=StatusBuff[locX+0x0B];
 a60:	cd 2d       	mov	r28, r13
 a62:	d0 e0       	ldi	r29, 0x00	; 0


USART_Int_StrHEXRAW(StatusBuff[locX+0x14+1],0);
 a64:	ce 01       	movw	r24, r28
 a66:	8f 58       	subi	r24, 0x8F	; 143
 a68:	9e 4f       	sbci	r25, 0xFE	; 254
 a6a:	6c 01       	movw	r12, r24
 a6c:	fc 01       	movw	r30, r24
 a6e:	80 81       	ld	r24, Z
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
USART_Int_StrHEXRAW(StatusBuff[locX+0x14],0);
 a7a:	ce 01       	movw	r24, r28
 a7c:	80 59       	subi	r24, 0x90	; 144
 a7e:	9e 4f       	sbci	r25, 0xFE	; 254
 a80:	5c 01       	movw	r10, r24
 a82:	fc 01       	movw	r30, r24
 a84:	80 81       	ld	r24, Z
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
USART_Int_StrHEXRAW(StatusBuff[locX+0x1a+1],0);
 a90:	ce 01       	movw	r24, r28
 a92:	89 58       	subi	r24, 0x89	; 137
 a94:	9e 4f       	sbci	r25, 0xFE	; 254
 a96:	7c 01       	movw	r14, r24
 a98:	fc 01       	movw	r30, r24
 a9a:	80 81       	ld	r24, Z
 a9c:	60 e0       	ldi	r22, 0x00	; 0
 a9e:	70 e0       	ldi	r23, 0x00	; 0
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
USART_Int_StrHEXRAW(StatusBuff[locX+0x1a],0);
 aa6:	8e 01       	movw	r16, r28
 aa8:	0a 58       	subi	r16, 0x8A	; 138
 aaa:	1e 4f       	sbci	r17, 0xFE	; 254
 aac:	f8 01       	movw	r30, r16
 aae:	80 81       	ld	r24, Z
 ab0:	60 e0       	ldi	r22, 0x00	; 0
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>


uint32_t ClustAddr = (65536*(StatusBuff[locX+0x15])) + (4096*(StatusBuff[locX+0x14])) +(256*(StatusBuff[locX+0x1B])) + (StatusBuff[locX+0x1a]);
 aba:	f6 01       	movw	r30, r12
 abc:	80 81       	ld	r24, Z
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	a0 e0       	ldi	r26, 0x00	; 0
 ac2:	b0 e0       	ldi	r27, 0x00	; 0
 ac4:	bc 01       	movw	r22, r24
 ac6:	55 27       	eor	r21, r21
 ac8:	44 27       	eor	r20, r20
 aca:	f5 01       	movw	r30, r10
 acc:	80 81       	ld	r24, Z
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	98 2f       	mov	r25, r24
 ad2:	88 27       	eor	r24, r24
 ad4:	92 95       	swap	r25
 ad6:	90 7f       	andi	r25, 0xF0	; 240
 ad8:	09 2e       	mov	r0, r25
 ada:	00 0c       	add	r0, r0
 adc:	aa 0b       	sbc	r26, r26
 ade:	bb 0b       	sbc	r27, r27
 ae0:	84 0f       	add	r24, r20
 ae2:	95 1f       	adc	r25, r21
 ae4:	a6 1f       	adc	r26, r22
 ae6:	b7 1f       	adc	r27, r23
 ae8:	f7 01       	movw	r30, r14
 aea:	c0 80       	ld	r12, Z
 aec:	d1 2c       	mov	r13, r1
 aee:	dc 2c       	mov	r13, r12
 af0:	cc 24       	eor	r12, r12
 af2:	0d 2c       	mov	r0, r13
 af4:	00 0c       	add	r0, r0
 af6:	ee 08       	sbc	r14, r14
 af8:	ff 08       	sbc	r15, r15
 afa:	c8 0e       	add	r12, r24
 afc:	d9 1e       	adc	r13, r25
 afe:	ea 1e       	adc	r14, r26
 b00:	fb 1e       	adc	r15, r27
 b02:	f8 01       	movw	r30, r16
 b04:	80 81       	ld	r24, Z
 b06:	c8 0e       	add	r12, r24
 b08:	d1 1c       	adc	r13, r1
 b0a:	e1 1c       	adc	r14, r1
 b0c:	f1 1c       	adc	r15, r1
USART_Send("\r\n");
 b0e:	85 e7       	ldi	r24, 0x75	; 117
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
USART_Send("ClustAddr =");
 b16:	88 e7       	ldi	r24, 0x78	; 120
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
USART_Long_Str(ClustAddr,0);
 b1e:	40 e0       	ldi	r20, 0x00	; 0
 b20:	50 e0       	ldi	r21, 0x00	; 0
 b22:	c7 01       	movw	r24, r14
 b24:	b6 01       	movw	r22, r12
 b26:	0e 94 8c 01 	call	0x318	; 0x318 <USART_Long_Str>
USART_Send("\r\n");
 b2a:	85 e7       	ldi	r24, 0x75	; 117
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>


for(int t = locX; t<locX+32; t++){       
 b32:	8e 01       	movw	r16, r28
 b34:	1a c0       	rjmp	.+52     	; 0xb6a <FAT32_Open_File+0x23e>
	USART_Send("\r\nIndex =");
 b36:	84 e8       	ldi	r24, 0x84	; 132
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
	USART_Int_Str(t-locX,0);
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	70 e0       	ldi	r23, 0x00	; 0
 b42:	c8 01       	movw	r24, r16
 b44:	8c 1b       	sub	r24, r28
 b46:	9d 0b       	sbc	r25, r29
 b48:	0e 94 5f 01 	call	0x2be	; 0x2be <USART_Int_Str>
	USART_Send("=| ");
 b4c:	8e e8       	ldi	r24, 0x8E	; 142
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
	USART_Int_StrHEXRAW(StatusBuff[t],0);
 b54:	f8 01       	movw	r30, r16
 b56:	e4 5a       	subi	r30, 0xA4	; 164
 b58:	fe 4f       	sbci	r31, 0xFE	; 254
 b5a:	80 81       	ld	r24, Z
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
USART_Send("ClustAddr =");
USART_Long_Str(ClustAddr,0);
USART_Send("\r\n");


for(int t = locX; t<locX+32; t++){       
 b66:	0f 5f       	subi	r16, 0xFF	; 255
 b68:	1f 4f       	sbci	r17, 0xFF	; 255
 b6a:	ce 01       	movw	r24, r28
 b6c:	80 96       	adiw	r24, 0x20	; 32
 b6e:	08 17       	cp	r16, r24
 b70:	19 07       	cpc	r17, r25
 b72:	0c f3       	brlt	.-62     	; 0xb36 <FAT32_Open_File+0x20a>
	USART_Send("=| ");
	USART_Int_StrHEXRAW(StatusBuff[t],0);
}


SD_RSB(StatusBuff,RootDirSec+(8*(ClustAddr-2)),&token);
 b74:	f2 e0       	ldi	r31, 0x02	; 2
 b76:	cf 1a       	sub	r12, r31
 b78:	d1 08       	sbc	r13, r1
 b7a:	e1 08       	sbc	r14, r1
 b7c:	f0 ee       	ldi	r31, 0xE0	; 224
 b7e:	ff 0a       	sbc	r15, r31
 b80:	cc 0c       	add	r12, r12
 b82:	dd 1c       	adc	r13, r13
 b84:	ee 1c       	adc	r14, r14
 b86:	ff 1c       	adc	r15, r15
 b88:	cc 0c       	add	r12, r12
 b8a:	dd 1c       	adc	r13, r13
 b8c:	ee 1c       	adc	r14, r14
 b8e:	ff 1c       	adc	r15, r15
 b90:	cc 0c       	add	r12, r12
 b92:	dd 1c       	adc	r13, r13
 b94:	ee 1c       	adc	r14, r14
 b96:	ff 1c       	adc	r15, r15
 b98:	40 91 db 03 	lds	r20, 0x03DB	; 0x8003db <RootDirSec>
 b9c:	50 91 dc 03 	lds	r21, 0x03DC	; 0x8003dc <RootDirSec+0x1>
 ba0:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <RootDirSec+0x2>
 ba4:	70 91 de 03 	lds	r23, 0x03DE	; 0x8003de <RootDirSec+0x3>
 ba8:	4c 0d       	add	r20, r12
 baa:	5d 1d       	adc	r21, r13
 bac:	6e 1d       	adc	r22, r14
 bae:	7f 1d       	adc	r23, r15
 bb0:	23 ee       	ldi	r18, 0xE3	; 227
 bb2:	33 e0       	ldi	r19, 0x03	; 3
 bb4:	8c e5       	ldi	r24, 0x5C	; 92
 bb6:	91 e0       	ldi	r25, 0x01	; 1
 bb8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <SD_RSB>
USART_Send("\r\n");
 bbc:	85 e7       	ldi	r24, 0x75	; 117
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
USART_Send("\r\n");
 bc4:	85 e7       	ldi	r24, 0x75	; 117
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>

for(int t = 0; t<512; t++){
 bcc:	c0 e0       	ldi	r28, 0x00	; 0
 bce:	d0 e0       	ldi	r29, 0x00	; 0
 bd0:	0a c0       	rjmp	.+20     	; 0xbe6 <FAT32_Open_File+0x2ba>
USART_Int_StrHEXRAW(StatusBuff[t],0);
 bd2:	fe 01       	movw	r30, r28
 bd4:	e4 5a       	subi	r30, 0xA4	; 164
 bd6:	fe 4f       	sbci	r31, 0xFE	; 254
 bd8:	80 81       	ld	r24, Z
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>

SD_RSB(StatusBuff,RootDirSec+(8*(ClustAddr-2)),&token);
USART_Send("\r\n");
USART_Send("\r\n");

for(int t = 0; t<512; t++){
 be4:	21 96       	adiw	r28, 0x01	; 1
 be6:	c1 15       	cp	r28, r1
 be8:	82 e0       	ldi	r24, 0x02	; 2
 bea:	d8 07       	cpc	r29, r24
 bec:	94 f3       	brlt	.-28     	; 0xbd2 <FAT32_Open_File+0x2a6>
USART_Int_StrHEXRAW(StatusBuff[t],0);
}

if(StatusBuff[511]!=0xFF){
 bee:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <RXSB>
 bf2:	8f 3f       	cpi	r24, 0xFF	; 255
 bf4:	79 f1       	breq	.+94     	; 0xc54 <FAT32_Open_File+0x328>
SD_RSB(StatusBuff,RootDirSec+(8*(ClustAddr-2)+1),&token);
 bf6:	40 91 db 03 	lds	r20, 0x03DB	; 0x8003db <RootDirSec>
 bfa:	50 91 dc 03 	lds	r21, 0x03DC	; 0x8003dc <RootDirSec+0x1>
 bfe:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <RootDirSec+0x2>
 c02:	70 91 de 03 	lds	r23, 0x03DE	; 0x8003de <RootDirSec+0x3>
 c06:	4c 0d       	add	r20, r12
 c08:	5d 1d       	adc	r21, r13
 c0a:	6e 1d       	adc	r22, r14
 c0c:	7f 1d       	adc	r23, r15
 c0e:	4f 5f       	subi	r20, 0xFF	; 255
 c10:	5f 4f       	sbci	r21, 0xFF	; 255
 c12:	6f 4f       	sbci	r22, 0xFF	; 255
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	23 ee       	ldi	r18, 0xE3	; 227
 c18:	33 e0       	ldi	r19, 0x03	; 3
 c1a:	8c e5       	ldi	r24, 0x5C	; 92
 c1c:	91 e0       	ldi	r25, 0x01	; 1
 c1e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <SD_RSB>
USART_Send("\r\n");
 c22:	85 e7       	ldi	r24, 0x75	; 117
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
USART_Send("\r\n");
 c2a:	85 e7       	ldi	r24, 0x75	; 117
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>

for(int t = 0; t<512; t++){
 c32:	c0 e0       	ldi	r28, 0x00	; 0
 c34:	d0 e0       	ldi	r29, 0x00	; 0
 c36:	0a c0       	rjmp	.+20     	; 0xc4c <FAT32_Open_File+0x320>
	USART_Int_StrHEXRAW(StatusBuff[t],0);
 c38:	fe 01       	movw	r30, r28
 c3a:	e4 5a       	subi	r30, 0xA4	; 164
 c3c:	fe 4f       	sbci	r31, 0xFE	; 254
 c3e:	80 81       	ld	r24, Z
 c40:	60 e0       	ldi	r22, 0x00	; 0
 c42:	70 e0       	ldi	r23, 0x00	; 0
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
if(StatusBuff[511]!=0xFF){
SD_RSB(StatusBuff,RootDirSec+(8*(ClustAddr-2)+1),&token);
USART_Send("\r\n");
USART_Send("\r\n");

for(int t = 0; t<512; t++){
 c4a:	21 96       	adiw	r28, 0x01	; 1
 c4c:	c1 15       	cp	r28, r1
 c4e:	92 e0       	ldi	r25, 0x02	; 2
 c50:	d9 07       	cpc	r29, r25
 c52:	94 f3       	brlt	.-28     	; 0xc38 <FAT32_Open_File+0x30c>
}	
}


}
}
 c54:	df 91       	pop	r29
 c56:	cf 91       	pop	r28
 c58:	1f 91       	pop	r17
 c5a:	0f 91       	pop	r16
 c5c:	ff 90       	pop	r15
 c5e:	ef 90       	pop	r14
 c60:	df 90       	pop	r13
 c62:	cf 90       	pop	r12
 c64:	bf 90       	pop	r11
 c66:	af 90       	pop	r10
 c68:	08 95       	ret

00000c6a <main>:
#include <USART_AM16.c>
#include <SPI_ATM16.c>
#include <MicroSD_AM16.c>

int main(void)
{
 c6a:	0f 93       	push	r16
 c6c:	1f 93       	push	r17
 c6e:	cf 93       	push	r28

USART_init(0,8,9600);
 c70:	20 e8       	ldi	r18, 0x80	; 128
 c72:	35 e2       	ldi	r19, 0x25	; 37
 c74:	40 e0       	ldi	r20, 0x00	; 0
 c76:	50 e0       	ldi	r21, 0x00	; 0
 c78:	68 e0       	ldi	r22, 0x08	; 8
 c7a:	70 e0       	ldi	r23, 0x00	; 0
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 49 00 	call	0x92	; 0x92 <USART_init>
SPI_MAST_Init(0,128,0,0,0);
 c84:	00 e0       	ldi	r16, 0x00	; 0
 c86:	10 e0       	ldi	r17, 0x00	; 0
 c88:	20 e0       	ldi	r18, 0x00	; 0
 c8a:	30 e0       	ldi	r19, 0x00	; 0
 c8c:	40 e0       	ldi	r20, 0x00	; 0
 c8e:	50 e0       	ldi	r21, 0x00	; 0
 c90:	60 e8       	ldi	r22, 0x80	; 128
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	0e 94 12 02 	call	0x424	; 0x424 <SPI_MAST_Init>


char SDIS = SD_Init();
 c9c:	0e 94 88 03 	call	0x710	; 0x710 <SD_Init>
 ca0:	c8 2f       	mov	r28, r24
USART_Send("\r\nHello Void. I have awoken\r\n Response | ");
 ca2:	82 e9       	ldi	r24, 0x92	; 146
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
USART_Int_Str(SDIS,0);
 caa:	60 e0       	ldi	r22, 0x00	; 0
 cac:	70 e0       	ldi	r23, 0x00	; 0
 cae:	8c 2f       	mov	r24, r28
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	0e 94 5f 01 	call	0x2be	; 0x2be <USART_Int_Str>


if(SDIS==5){
 cb6:	c5 30       	cpi	r28, 0x05	; 5
 cb8:	51 f4       	brne	.+20     	; 0xcce <main+0x64>
FAT32_Init();
 cba:	0e 94 38 04 	call	0x870	; 0x870 <FAT32_Init>
// USART_Int_Str(StatusBuff[u],0);
// 
// }


USART_Send("\r\n");
 cbe:	85 e7       	ldi	r24, 0x75	; 117
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
FAT32_Open_File("HELLO");
 cc6:	8c eb       	ldi	r24, 0xBC	; 188
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	0e 94 96 04 	call	0x92c	; 0x92c <FAT32_Open_File>




}
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	cf 91       	pop	r28
 cd4:	1f 91       	pop	r17
 cd6:	0f 91       	pop	r16
 cd8:	08 95       	ret

00000cda <__udivmodsi4>:
 cda:	a1 e2       	ldi	r26, 0x21	; 33
 cdc:	1a 2e       	mov	r1, r26
 cde:	aa 1b       	sub	r26, r26
 ce0:	bb 1b       	sub	r27, r27
 ce2:	fd 01       	movw	r30, r26
 ce4:	0d c0       	rjmp	.+26     	; 0xd00 <__udivmodsi4_ep>

00000ce6 <__udivmodsi4_loop>:
 ce6:	aa 1f       	adc	r26, r26
 ce8:	bb 1f       	adc	r27, r27
 cea:	ee 1f       	adc	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	a2 17       	cp	r26, r18
 cf0:	b3 07       	cpc	r27, r19
 cf2:	e4 07       	cpc	r30, r20
 cf4:	f5 07       	cpc	r31, r21
 cf6:	20 f0       	brcs	.+8      	; 0xd00 <__udivmodsi4_ep>
 cf8:	a2 1b       	sub	r26, r18
 cfa:	b3 0b       	sbc	r27, r19
 cfc:	e4 0b       	sbc	r30, r20
 cfe:	f5 0b       	sbc	r31, r21

00000d00 <__udivmodsi4_ep>:
 d00:	66 1f       	adc	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	99 1f       	adc	r25, r25
 d08:	1a 94       	dec	r1
 d0a:	69 f7       	brne	.-38     	; 0xce6 <__udivmodsi4_loop>
 d0c:	60 95       	com	r22
 d0e:	70 95       	com	r23
 d10:	80 95       	com	r24
 d12:	90 95       	com	r25
 d14:	9b 01       	movw	r18, r22
 d16:	ac 01       	movw	r20, r24
 d18:	bd 01       	movw	r22, r26
 d1a:	cf 01       	movw	r24, r30
 d1c:	08 95       	ret

00000d1e <__muluhisi3>:
 d1e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__umulhisi3>
 d22:	a5 9f       	mul	r26, r21
 d24:	90 0d       	add	r25, r0
 d26:	b4 9f       	mul	r27, r20
 d28:	90 0d       	add	r25, r0
 d2a:	a4 9f       	mul	r26, r20
 d2c:	80 0d       	add	r24, r0
 d2e:	91 1d       	adc	r25, r1
 d30:	11 24       	eor	r1, r1
 d32:	08 95       	ret

00000d34 <__umulhisi3>:
 d34:	a2 9f       	mul	r26, r18
 d36:	b0 01       	movw	r22, r0
 d38:	b3 9f       	mul	r27, r19
 d3a:	c0 01       	movw	r24, r0
 d3c:	a3 9f       	mul	r26, r19
 d3e:	70 0d       	add	r23, r0
 d40:	81 1d       	adc	r24, r1
 d42:	11 24       	eor	r1, r1
 d44:	91 1d       	adc	r25, r1
 d46:	b2 9f       	mul	r27, r18
 d48:	70 0d       	add	r23, r0
 d4a:	81 1d       	adc	r24, r1
 d4c:	11 24       	eor	r1, r1
 d4e:	91 1d       	adc	r25, r1
 d50:	08 95       	ret

00000d52 <__itoa_ncheck>:
 d52:	bb 27       	eor	r27, r27
 d54:	4a 30       	cpi	r20, 0x0A	; 10
 d56:	31 f4       	brne	.+12     	; 0xd64 <__itoa_ncheck+0x12>
 d58:	99 23       	and	r25, r25
 d5a:	22 f4       	brpl	.+8      	; 0xd64 <__itoa_ncheck+0x12>
 d5c:	bd e2       	ldi	r27, 0x2D	; 45
 d5e:	90 95       	com	r25
 d60:	81 95       	neg	r24
 d62:	9f 4f       	sbci	r25, 0xFF	; 255
 d64:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__utoa_common>

00000d68 <__ltoa_ncheck>:
 d68:	bb 27       	eor	r27, r27
 d6a:	2a 30       	cpi	r18, 0x0A	; 10
 d6c:	51 f4       	brne	.+20     	; 0xd82 <__ltoa_ncheck+0x1a>
 d6e:	99 23       	and	r25, r25
 d70:	42 f4       	brpl	.+16     	; 0xd82 <__ltoa_ncheck+0x1a>
 d72:	bd e2       	ldi	r27, 0x2D	; 45
 d74:	90 95       	com	r25
 d76:	80 95       	com	r24
 d78:	70 95       	com	r23
 d7a:	61 95       	neg	r22
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255
 d7e:	8f 4f       	sbci	r24, 0xFF	; 255
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__ultoa_common>

00000d86 <__ultoa_ncheck>:
 d86:	bb 27       	eor	r27, r27

00000d88 <__ultoa_common>:
 d88:	fa 01       	movw	r30, r20
 d8a:	a6 2f       	mov	r26, r22
 d8c:	62 17       	cp	r22, r18
 d8e:	71 05       	cpc	r23, r1
 d90:	81 05       	cpc	r24, r1
 d92:	91 05       	cpc	r25, r1
 d94:	33 0b       	sbc	r19, r19
 d96:	30 fb       	bst	r19, 0
 d98:	66 f0       	brts	.+24     	; 0xdb2 <__ultoa_common+0x2a>
 d9a:	aa 27       	eor	r26, r26
 d9c:	66 0f       	add	r22, r22
 d9e:	77 1f       	adc	r23, r23
 da0:	88 1f       	adc	r24, r24
 da2:	99 1f       	adc	r25, r25
 da4:	aa 1f       	adc	r26, r26
 da6:	a2 17       	cp	r26, r18
 da8:	10 f0       	brcs	.+4      	; 0xdae <__ultoa_common+0x26>
 daa:	a2 1b       	sub	r26, r18
 dac:	63 95       	inc	r22
 dae:	38 50       	subi	r19, 0x08	; 8
 db0:	a9 f7       	brne	.-22     	; 0xd9c <__ultoa_common+0x14>
 db2:	a0 5d       	subi	r26, 0xD0	; 208
 db4:	aa 33       	cpi	r26, 0x3A	; 58
 db6:	08 f0       	brcs	.+2      	; 0xdba <__ultoa_common+0x32>
 db8:	a9 5d       	subi	r26, 0xD9	; 217
 dba:	a1 93       	st	Z+, r26
 dbc:	36 f7       	brtc	.-52     	; 0xd8a <__ultoa_common+0x2>
 dbe:	b1 11       	cpse	r27, r1
 dc0:	b1 93       	st	Z+, r27
 dc2:	10 82       	st	Z, r1
 dc4:	ca 01       	movw	r24, r20
 dc6:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <strrev>

00000dca <__utoa_ncheck>:
 dca:	bb 27       	eor	r27, r27

00000dcc <__utoa_common>:
 dcc:	fb 01       	movw	r30, r22
 dce:	55 27       	eor	r21, r21
 dd0:	aa 27       	eor	r26, r26
 dd2:	88 0f       	add	r24, r24
 dd4:	99 1f       	adc	r25, r25
 dd6:	aa 1f       	adc	r26, r26
 dd8:	a4 17       	cp	r26, r20
 dda:	10 f0       	brcs	.+4      	; 0xde0 <__utoa_common+0x14>
 ddc:	a4 1b       	sub	r26, r20
 dde:	83 95       	inc	r24
 de0:	50 51       	subi	r21, 0x10	; 16
 de2:	b9 f7       	brne	.-18     	; 0xdd2 <__utoa_common+0x6>
 de4:	a0 5d       	subi	r26, 0xD0	; 208
 de6:	aa 33       	cpi	r26, 0x3A	; 58
 de8:	08 f0       	brcs	.+2      	; 0xdec <__utoa_common+0x20>
 dea:	a9 5d       	subi	r26, 0xD9	; 217
 dec:	a1 93       	st	Z+, r26
 dee:	00 97       	sbiw	r24, 0x00	; 0
 df0:	79 f7       	brne	.-34     	; 0xdd0 <__utoa_common+0x4>
 df2:	b1 11       	cpse	r27, r1
 df4:	b1 93       	st	Z+, r27
 df6:	11 92       	st	Z+, r1
 df8:	cb 01       	movw	r24, r22
 dfa:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <strrev>

00000dfe <strrev>:
 dfe:	dc 01       	movw	r26, r24
 e00:	fc 01       	movw	r30, r24
 e02:	67 2f       	mov	r22, r23
 e04:	71 91       	ld	r23, Z+
 e06:	77 23       	and	r23, r23
 e08:	e1 f7       	brne	.-8      	; 0xe02 <strrev+0x4>
 e0a:	32 97       	sbiw	r30, 0x02	; 2
 e0c:	04 c0       	rjmp	.+8      	; 0xe16 <strrev+0x18>
 e0e:	7c 91       	ld	r23, X
 e10:	6d 93       	st	X+, r22
 e12:	70 83       	st	Z, r23
 e14:	62 91       	ld	r22, -Z
 e16:	ae 17       	cp	r26, r30
 e18:	bf 07       	cpc	r27, r31
 e1a:	c8 f3       	brcs	.-14     	; 0xe0e <strrev+0x10>
 e1c:	08 95       	ret

00000e1e <_exit>:
 e1e:	f8 94       	cli

00000e20 <__stop_program>:
 e20:	ff cf       	rjmp	.-2      	; 0xe20 <__stop_program>
