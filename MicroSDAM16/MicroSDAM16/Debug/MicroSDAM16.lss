
MicroSDAM16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000c16  00000caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031e  008000aa  008000aa  00000cf4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000218c  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000911  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001181  00000000  00000000  00003975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00004af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000714  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000207a  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007882  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3c       	cpi	r26, 0xC8	; 200
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 05 	call	0xaa8	; 0xaa8 <main>
  8a:	0c 94 09 06 	jmp	0xc12	; 0xc12 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_init>:
	 readAttempts=0;
	 while(++readAttempts != SD_MAX_WRITE_ATTEMPTS)
	 if((read = SPI_transfer(0xFF)) != 0xFF) { *token = 0xFF; break; }   		 
		 	
}
 }
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	fc 01       	movw	r30, r24
  9c:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <__data_end>
  a0:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <__data_end+0x1>
  a4:	40 93 ac 00 	sts	0x00AC, r20	; 0x8000ac <__data_end+0x2>
  a8:	50 93 ad 00 	sts	0x00AD, r21	; 0x8000ad <__data_end+0x3>
  ac:	9a b1       	in	r25, 0x0a	; 10
  ae:	98 69       	ori	r25, 0x98	; 152
  b0:	9a b9       	out	0x0a, r25	; 10
  b2:	e1 30       	cpi	r30, 0x01	; 1
  b4:	f1 05       	cpc	r31, r1
  b6:	61 f0       	breq	.+24     	; 0xd0 <USART_init+0x3e>
  b8:	e2 30       	cpi	r30, 0x02	; 2
  ba:	f1 05       	cpc	r31, r1
  bc:	69 f0       	breq	.+26     	; 0xd8 <USART_init+0x46>
  be:	ef 2b       	or	r30, r31
  c0:	71 f4       	brne	.+28     	; 0xde <USART_init+0x4c>
  c2:	80 b5       	in	r24, 0x20	; 32
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	80 bd       	out	0x20, r24	; 32
  c8:	80 b5       	in	r24, 0x20	; 32
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	80 bd       	out	0x20, r24	; 32
  ce:	07 c0       	rjmp	.+14     	; 0xde <USART_init+0x4c>
  d0:	80 b5       	in	r24, 0x20	; 32
  d2:	80 63       	ori	r24, 0x30	; 48
  d4:	80 bd       	out	0x20, r24	; 32
  d6:	03 c0       	rjmp	.+6      	; 0xde <USART_init+0x4c>
  d8:	80 b5       	in	r24, 0x20	; 32
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	80 bd       	out	0x20, r24	; 32
  de:	67 30       	cpi	r22, 0x07	; 7
  e0:	71 05       	cpc	r23, r1
  e2:	e9 f0       	breq	.+58     	; 0x11e <USART_init+0x8c>
  e4:	3c f4       	brge	.+14     	; 0xf4 <USART_init+0x62>
  e6:	65 30       	cpi	r22, 0x05	; 5
  e8:	71 05       	cpc	r23, r1
  ea:	59 f0       	breq	.+22     	; 0x102 <USART_init+0x70>
  ec:	66 30       	cpi	r22, 0x06	; 6
  ee:	71 05       	cpc	r23, r1
  f0:	91 f0       	breq	.+36     	; 0x116 <USART_init+0x84>
  f2:	23 c0       	rjmp	.+70     	; 0x13a <USART_init+0xa8>
  f4:	68 30       	cpi	r22, 0x08	; 8
  f6:	71 05       	cpc	r23, r1
  f8:	b1 f0       	breq	.+44     	; 0x126 <USART_init+0x94>
  fa:	69 30       	cpi	r22, 0x09	; 9
  fc:	71 05       	cpc	r23, r1
  fe:	d1 f0       	breq	.+52     	; 0x134 <USART_init+0xa2>
 100:	1c c0       	rjmp	.+56     	; 0x13a <USART_init+0xa8>
 102:	80 b5       	in	r24, 0x20	; 32
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	80 bd       	out	0x20, r24	; 32
 108:	80 b5       	in	r24, 0x20	; 32
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	80 bd       	out	0x20, r24	; 32
 10e:	80 b5       	in	r24, 0x20	; 32
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	80 bd       	out	0x20, r24	; 32
 114:	12 c0       	rjmp	.+36     	; 0x13a <USART_init+0xa8>
 116:	80 b5       	in	r24, 0x20	; 32
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 bd       	out	0x20, r24	; 32
 11c:	0e c0       	rjmp	.+28     	; 0x13a <USART_init+0xa8>
 11e:	80 b5       	in	r24, 0x20	; 32
 120:	84 60       	ori	r24, 0x04	; 4
 122:	80 bd       	out	0x20, r24	; 32
 124:	0a c0       	rjmp	.+20     	; 0x13a <USART_init+0xa8>
 126:	80 b5       	in	r24, 0x20	; 32
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	80 bd       	out	0x20, r24	; 32
 12c:	80 b5       	in	r24, 0x20	; 32
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 bd       	out	0x20, r24	; 32
 132:	03 c0       	rjmp	.+6      	; 0x13a <USART_init+0xa8>
 134:	80 b5       	in	r24, 0x20	; 32
 136:	86 60       	ori	r24, 0x06	; 6
 138:	80 bd       	out	0x20, r24	; 32
 13a:	0f 2e       	mov	r0, r31
 13c:	f0 ed       	ldi	r31, 0xD0	; 208
 13e:	cf 2e       	mov	r12, r31
 140:	f2 e1       	ldi	r31, 0x12	; 18
 142:	df 2e       	mov	r13, r31
 144:	f3 e1       	ldi	r31, 0x13	; 19
 146:	ef 2e       	mov	r14, r31
 148:	f1 2c       	mov	r15, r1
 14a:	f0 2d       	mov	r31, r0
 14c:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__data_end>
 150:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <__data_end+0x1>
 154:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <__data_end+0x2>
 158:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <__data_end+0x3>
 15c:	c7 01       	movw	r24, r14
 15e:	b6 01       	movw	r22, r12
 160:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 164:	21 50       	subi	r18, 0x01	; 1
 166:	29 b9       	out	0x09, r18	; 9
 168:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__data_end>
 16c:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <__data_end+0x1>
 170:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <__data_end+0x2>
 174:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <__data_end+0x3>
 178:	c7 01       	movw	r24, r14
 17a:	b6 01       	movw	r22, r12
 17c:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 180:	da 01       	movw	r26, r20
 182:	c9 01       	movw	r24, r18
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	a1 09       	sbc	r26, r1
 188:	b1 09       	sbc	r27, r1
 18a:	89 2f       	mov	r24, r25
 18c:	9a 2f       	mov	r25, r26
 18e:	ab 2f       	mov	r26, r27
 190:	bb 27       	eor	r27, r27
 192:	80 bd       	out	0x20, r24	; 32
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <T>:
 19e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
 1a2:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__data_end+0x1>
 1a6:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <__data_end+0x2>
 1aa:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <__data_end+0x3>
 1ae:	89 32       	cpi	r24, 0x29	; 41
 1b0:	93 42       	sbci	r25, 0x23	; 35
 1b2:	a1 05       	cpc	r26, r1
 1b4:	b1 05       	cpc	r27, r1
 1b6:	34 f4       	brge	.+12     	; 0x1c4 <T+0x26>
 1b8:	87 e8       	ldi	r24, 0x87	; 135
 1ba:	93 e1       	ldi	r25, 0x13	; 19
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <T+0x1e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <T+0x24>
 1c2:	00 00       	nop
 1c4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
 1c8:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__data_end+0x1>
 1cc:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <__data_end+0x2>
 1d0:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <__data_end+0x3>
 1d4:	89 38       	cpi	r24, 0x89	; 137
 1d6:	93 41       	sbci	r25, 0x13	; 19
 1d8:	a1 05       	cpc	r26, r1
 1da:	b1 05       	cpc	r27, r1
 1dc:	34 f4       	brge	.+12     	; 0x1ea <T+0x4c>
 1de:	87 ec       	ldi	r24, 0xC7	; 199
 1e0:	9f ea       	ldi	r25, 0xAF	; 175
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <T+0x44>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <T+0x4a>
 1e8:	00 00       	nop
 1ea:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
 1ee:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__data_end+0x1>
 1f2:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <__data_end+0x2>
 1f6:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <__data_end+0x3>
 1fa:	81 3b       	cpi	r24, 0xB1	; 177
 1fc:	94 40       	sbci	r25, 0x04	; 4
 1fe:	a1 05       	cpc	r26, r1
 200:	b1 05       	cpc	r27, r1
 202:	4c f4       	brge	.+18     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9d e0       	ldi	r25, 0x0D	; 13
 208:	23 e0       	ldi	r18, 0x03	; 3
 20a:	81 50       	subi	r24, 0x01	; 1
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <USART_TxChar>:
 218:	5d 9b       	sbis	0x0b, 5	; 11
 21a:	fe cf       	rjmp	.-4      	; 0x218 <USART_TxChar>
 21c:	8c b9       	out	0x0c, r24	; 12
 21e:	08 95       	ret

00000220 <USART_Send>:
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	8c 01       	movw	r16, r24
 22a:	c0 e0       	ldi	r28, 0x00	; 0
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	05 c0       	rjmp	.+10     	; 0x23a <USART_Send+0x1a>
 230:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 234:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	f8 01       	movw	r30, r16
 23c:	ec 0f       	add	r30, r28
 23e:	fd 1f       	adc	r31, r29
 240:	80 81       	ld	r24, Z
 242:	81 11       	cpse	r24, r1
 244:	f5 cf       	rjmp	.-22     	; 0x230 <USART_Send+0x10>
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <USART_Send_ESS>:
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	8c 01       	movw	r16, r24
 25e:	7b 01       	movw	r14, r22
 260:	c0 e0       	ldi	r28, 0x00	; 0
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	09 c0       	rjmp	.+18     	; 0x278 <USART_Send_ESS+0x28>
 266:	f8 01       	movw	r30, r16
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	80 81       	ld	r24, Z
 26e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 272:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	f8 01       	movw	r30, r16
 27a:	01 90       	ld	r0, Z+
 27c:	00 20       	and	r0, r0
 27e:	e9 f7       	brne	.-6      	; 0x27a <USART_Send_ESS+0x2a>
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	e0 1b       	sub	r30, r16
 284:	f1 0b       	sbc	r31, r17
 286:	ce 17       	cp	r28, r30
 288:	df 07       	cpc	r29, r31
 28a:	68 f3       	brcs	.-38     	; 0x266 <USART_Send_ESS+0x16>
 28c:	ea 94       	dec	r14
 28e:	ef 28       	or	r14, r15
 290:	79 f4       	brne	.+30     	; 0x2b0 <USART_Send_ESS+0x60>
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 298:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 29c:	8c e7       	ldi	r24, 0x7C	; 124
 29e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 2a2:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 2a6:	85 e4       	ldi	r24, 0x45	; 69
 2a8:	0e 94 0c 01 	call	0x218	; 0x218 <USART_TxChar>
 2ac:	0e 94 cf 00 	call	0x19e	; 0x19e <T>
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	08 95       	ret

000002be <USART_Int_Str>:
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	eb 01       	movw	r28, r22
 2c4:	4a e0       	ldi	r20, 0x0A	; 10
 2c6:	6e e2       	ldi	r22, 0x2E	; 46
 2c8:	71 e0       	ldi	r23, 0x01	; 1
 2ca:	0e 94 d4 05 	call	0xba8	; 0xba8 <__itoa_ncheck>
 2ce:	be 01       	movw	r22, r28
 2d0:	8e e2       	ldi	r24, 0x2E	; 46
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 28 01 	call	0x250	; 0x250 <USART_Send_ESS>
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <USART_Int_StrHEXRAW>:
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
 2e8:	8b 01       	movw	r16, r22
 2ea:	40 e1       	ldi	r20, 0x10	; 16
 2ec:	6e e2       	ldi	r22, 0x2E	; 46
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	0e 94 d4 05 	call	0xba8	; 0xba8 <__itoa_ncheck>
 2f4:	cd 2b       	or	r28, r29
 2f6:	31 f4       	brne	.+12     	; 0x304 <USART_Int_StrHEXRAW+0x26>
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	83 e6       	ldi	r24, 0x63	; 99
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 28 01 	call	0x250	; 0x250 <USART_Send_ESS>
 304:	b8 01       	movw	r22, r16
 306:	8e e2       	ldi	r24, 0x2E	; 46
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 28 01 	call	0x250	; 0x250 <USART_Send_ESS>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <CheckRx>:
 318:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <RXSBWP>
 31c:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <RXSBWP+0x1>
 320:	fa 01       	movw	r30, r20
 322:	e3 55       	subi	r30, 0x53	; 83
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	80 81       	ld	r24, Z
 328:	8c 37       	cpi	r24, 0x7C	; 124
 32a:	71 f5       	brne	.+92     	; 0x388 <CheckRx+0x70>
 32c:	fa 01       	movw	r30, r20
 32e:	e2 55       	subi	r30, 0x52	; 82
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	80 81       	ld	r24, Z
 334:	85 34       	cpi	r24, 0x45	; 69
 336:	41 f5       	brne	.+80     	; 0x388 <CheckRx+0x70>
 338:	80 e8       	ldi	r24, 0x80	; 128
 33a:	e3 e4       	ldi	r30, 0x43	; 67
 33c:	f3 e0       	ldi	r31, 0x03	; 3
 33e:	df 01       	movw	r26, r30
 340:	1d 92       	st	X+, r1
 342:	8a 95       	dec	r24
 344:	e9 f7       	brne	.-6      	; 0x340 <CheckRx+0x28>
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	09 c0       	rjmp	.+18     	; 0x35e <CheckRx+0x46>
 34c:	fc 01       	movw	r30, r24
 34e:	e2 55       	subi	r30, 0x52	; 82
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	20 81       	ld	r18, Z
 354:	fc 01       	movw	r30, r24
 356:	ee 5b       	subi	r30, 0xBE	; 190
 358:	fc 4f       	sbci	r31, 0xFC	; 252
 35a:	20 83       	st	Z, r18
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	9a 01       	movw	r18, r20
 360:	23 50       	subi	r18, 0x03	; 3
 362:	31 09       	sbc	r19, r1
 364:	28 17       	cp	r18, r24
 366:	39 07       	cpc	r19, r25
 368:	8c f7       	brge	.-30     	; 0x34c <CheckRx+0x34>
 36a:	92 b3       	in	r25, 0x12	; 18
 36c:	88 e0       	ldi	r24, 0x08	; 8
 36e:	89 27       	eor	r24, r25
 370:	82 bb       	out	0x12, r24	; 18
 372:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <RXSBWP+0x1>
 376:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <RXSBWP>
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	ee ea       	ldi	r30, 0xAE	; 174
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	df 01       	movw	r26, r30
 382:	1d 92       	st	X+, r1
 384:	8a 95       	dec	r24
 386:	e9 f7       	brne	.-6      	; 0x382 <CheckRx+0x6a>
 388:	08 95       	ret

0000038a <__vector_11>:
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	4f 93       	push	r20
 39a:	5f 93       	push	r21
 39c:	6f 93       	push	r22
 39e:	7f 93       	push	r23
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
 3ac:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <RXSBWP>
 3b0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <RXSBWP+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <RXSBWP+0x1>
 3ba:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <RXSBWP>
 3be:	2c b1       	in	r18, 0x0c	; 12
 3c0:	fc 01       	movw	r30, r24
 3c2:	e2 55       	subi	r30, 0x52	; 82
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	20 83       	st	Z, r18
 3c8:	0e 94 8c 01 	call	0x318	; 0x318 <CheckRx>
 3cc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <RXSBWP>
 3d0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <RXSBWP+0x1>
 3d4:	80 38       	cpi	r24, 0x80	; 128
 3d6:	91 05       	cpc	r25, r1
 3d8:	24 f0       	brlt	.+8      	; 0x3e2 <__vector_11+0x58>
 3da:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <RXSBWP+0x1>
 3de:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <RXSBWP>
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <SPI_MAST_Init>:
 404:	0f 93       	push	r16
 406:	e7 b3       	in	r30, 0x17	; 23
 408:	ef 7b       	andi	r30, 0xBF	; 191
 40a:	e7 bb       	out	0x17, r30	; 23
 40c:	e7 b3       	in	r30, 0x17	; 23
 40e:	e0 62       	ori	r30, 0x20	; 32
 410:	e7 bb       	out	0x17, r30	; 23
 412:	e7 b3       	in	r30, 0x17	; 23
 414:	e0 61       	ori	r30, 0x10	; 16
 416:	e7 bb       	out	0x17, r30	; 23
 418:	e7 b3       	in	r30, 0x17	; 23
 41a:	e0 68       	ori	r30, 0x80	; 128
 41c:	e7 bb       	out	0x17, r30	; 23
 41e:	0e b9       	out	0x0e, r16	; 14
 420:	1d b8       	out	0x0d, r1	; 13
 422:	ed b1       	in	r30, 0x0d	; 13
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	82 95       	swap	r24
 42a:	92 95       	swap	r25
 42c:	90 7f       	andi	r25, 0xF0	; 240
 42e:	98 27       	eor	r25, r24
 430:	80 7f       	andi	r24, 0xF0	; 240
 432:	98 27       	eor	r25, r24
 434:	8e 2b       	or	r24, r30
 436:	8d b9       	out	0x0d, r24	; 13
 438:	8d b1       	in	r24, 0x0d	; 13
 43a:	44 0f       	add	r20, r20
 43c:	55 1f       	adc	r21, r21
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	22 0f       	add	r18, r18
 44c:	33 1f       	adc	r19, r19
 44e:	40 6c       	ori	r20, 0xC0	; 192
 450:	24 2b       	or	r18, r20
 452:	28 2b       	or	r18, r24
 454:	20 61       	ori	r18, 0x10	; 16
 456:	2d b9       	out	0x0d, r18	; 13
 458:	60 31       	cpi	r22, 0x10	; 16
 45a:	71 05       	cpc	r23, r1
 45c:	99 f0       	breq	.+38     	; 0x484 <__stack+0x25>
 45e:	24 f4       	brge	.+8      	; 0x468 <__stack+0x9>
 460:	64 30       	cpi	r22, 0x04	; 4
 462:	71 05       	cpc	r23, r1
 464:	41 f0       	breq	.+16     	; 0x476 <__stack+0x17>
 466:	22 c0       	rjmp	.+68     	; 0x4ac <__stack+0x4d>
 468:	60 34       	cpi	r22, 0x40	; 64
 46a:	71 05       	cpc	r23, r1
 46c:	91 f0       	breq	.+36     	; 0x492 <__stack+0x33>
 46e:	60 38       	cpi	r22, 0x80	; 128
 470:	71 05       	cpc	r23, r1
 472:	b1 f0       	breq	.+44     	; 0x4a0 <__stack+0x41>
 474:	1b c0       	rjmp	.+54     	; 0x4ac <__stack+0x4d>
 476:	8d b1       	in	r24, 0x0d	; 13
 478:	8d 7f       	andi	r24, 0xFD	; 253
 47a:	8d b9       	out	0x0d, r24	; 13
 47c:	8d b1       	in	r24, 0x0d	; 13
 47e:	8e 7f       	andi	r24, 0xFE	; 254
 480:	8d b9       	out	0x0d, r24	; 13
 482:	14 c0       	rjmp	.+40     	; 0x4ac <__stack+0x4d>
 484:	8d b1       	in	r24, 0x0d	; 13
 486:	8d 7f       	andi	r24, 0xFD	; 253
 488:	8d b9       	out	0x0d, r24	; 13
 48a:	8d b1       	in	r24, 0x0d	; 13
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	8d b9       	out	0x0d, r24	; 13
 490:	0d c0       	rjmp	.+26     	; 0x4ac <__stack+0x4d>
 492:	8d b1       	in	r24, 0x0d	; 13
 494:	82 60       	ori	r24, 0x02	; 2
 496:	8d b9       	out	0x0d, r24	; 13
 498:	8d b1       	in	r24, 0x0d	; 13
 49a:	8e 7f       	andi	r24, 0xFE	; 254
 49c:	8d b9       	out	0x0d, r24	; 13
 49e:	06 c0       	rjmp	.+12     	; 0x4ac <__stack+0x4d>
 4a0:	8d b1       	in	r24, 0x0d	; 13
 4a2:	82 60       	ori	r24, 0x02	; 2
 4a4:	8d b9       	out	0x0d, r24	; 13
 4a6:	8d b1       	in	r24, 0x0d	; 13
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	8d b9       	out	0x0d, r24	; 13
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <SPI_Write>:
 4b0:	e7 e8       	ldi	r30, 0x87	; 135
 4b2:	f3 e1       	ldi	r31, 0x13	; 19
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <SPI_Write+0x4>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <SPI_Write+0xa>
 4ba:	00 00       	nop
 4bc:	8f b9       	out	0x0f, r24	; 15
 4be:	77 9b       	sbis	0x0e, 7	; 14
 4c0:	fe cf       	rjmp	.-4      	; 0x4be <SPI_Write+0xe>
 4c2:	8f b1       	in	r24, 0x0f	; 15
 4c4:	08 95       	ret

000004c6 <SPI_transfer>:
 4c6:	8f b9       	out	0x0f, r24	; 15
 4c8:	77 9b       	sbis	0x0e, 7	; 14
 4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <SPI_transfer+0x2>
 4cc:	8f b1       	in	r24, 0x0f	; 15
 4ce:	08 95       	ret

000004d0 <SD_Command>:
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	d4 2f       	mov	r29, r20
 4dc:	15 2f       	mov	r17, r21
 4de:	06 2f       	mov	r16, r22
 4e0:	f7 2e       	mov	r15, r23
 4e2:	c2 2f       	mov	r28, r18
 4e4:	80 64       	ori	r24, 0x40	; 64
 4e6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Write>
 4ea:	8f 2d       	mov	r24, r15
 4ec:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Write>
 4f0:	80 2f       	mov	r24, r16
 4f2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Write>
 4f6:	81 2f       	mov	r24, r17
 4f8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Write>
 4fc:	8d 2f       	mov	r24, r29
 4fe:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Write>
 502:	8c 2f       	mov	r24, r28
 504:	81 60       	ori	r24, 0x01	; 1
 506:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Write>
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	08 95       	ret

00000516 <SD_powerUpSeq>:
 516:	cf 93       	push	r28
 518:	8b b3       	in	r24, 0x1b	; 27
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	8b bb       	out	0x1b, r24	; 27
 51e:	87 e8       	ldi	r24, 0x87	; 135
 520:	93 e1       	ldi	r25, 0x13	; 19
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <SD_powerUpSeq+0xc>
 526:	00 c0       	rjmp	.+0      	; 0x528 <SD_powerUpSeq+0x12>
 528:	00 00       	nop
 52a:	c0 e0       	ldi	r28, 0x00	; 0
 52c:	07 c0       	rjmp	.+14     	; 0x53c <SD_powerUpSeq+0x26>
 52e:	8b b3       	in	r24, 0x1b	; 27
 530:	8e 7f       	andi	r24, 0xFE	; 254
 532:	8b bb       	out	0x1b, r24	; 27
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Write>
 53a:	cf 5f       	subi	r28, 0xFF	; 255
 53c:	ca 30       	cpi	r28, 0x0A	; 10
 53e:	b8 f3       	brcs	.-18     	; 0x52e <SD_powerUpSeq+0x18>
 540:	8b b3       	in	r24, 0x1b	; 27
 542:	81 60       	ori	r24, 0x01	; 1
 544:	8b bb       	out	0x1b, r24	; 27
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Write>
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <SD_readRes1>:
 550:	cf 93       	push	r28
 552:	c0 e0       	ldi	r28, 0x00	; 0
 554:	03 c0       	rjmp	.+6      	; 0x55c <SD_readRes1+0xc>
 556:	cf 5f       	subi	r28, 0xFF	; 255
 558:	c9 30       	cpi	r28, 0x09	; 9
 55a:	30 f4       	brcc	.+12     	; 0x568 <SD_readRes1+0x18>
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 562:	8f 3f       	cpi	r24, 0xFF	; 255
 564:	c1 f3       	breq	.-16     	; 0x556 <SD_readRes1+0x6>
 566:	01 c0       	rjmp	.+2      	; 0x56a <SD_readRes1+0x1a>
 568:	80 e8       	ldi	r24, 0x80	; 128
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <SD_goIdleState>:
 56e:	cf 93       	push	r28
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 576:	8b b3       	in	r24, 0x1b	; 27
 578:	8e 7f       	andi	r24, 0xFE	; 254
 57a:	8b bb       	out	0x1b, r24	; 27
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 582:	24 e9       	ldi	r18, 0x94	; 148
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	ba 01       	movw	r22, r20
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SD_Command>
 590:	0e 94 a8 02 	call	0x550	; 0x550 <SD_readRes1>
 594:	c8 2f       	mov	r28, r24
 596:	8f ef       	ldi	r24, 0xFF	; 255
 598:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 59c:	8b b3       	in	r24, 0x1b	; 27
 59e:	81 60       	ori	r24, 0x01	; 1
 5a0:	8b bb       	out	0x1b, r24	; 27
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 5a8:	8c 2f       	mov	r24, r28
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <SD_readRes7>:
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	ec 01       	movw	r28, r24
 5b4:	0e 94 a8 02 	call	0x550	; 0x550 <SD_readRes1>
 5b8:	88 83       	st	Y, r24
 5ba:	82 30       	cpi	r24, 0x02	; 2
 5bc:	80 f4       	brcc	.+32     	; 0x5de <SD_readRes7+0x30>
 5be:	8f ef       	ldi	r24, 0xFF	; 255
 5c0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 5c4:	89 83       	std	Y+1, r24	; 0x01
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 5cc:	8a 83       	std	Y+2, r24	; 0x02
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 5d4:	8b 83       	std	Y+3, r24	; 0x03
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 5dc:	8c 83       	std	Y+4, r24	; 0x04
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <SD_sendIfCond>:
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	ec 01       	movw	r28, r24
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 5f0:	8b b3       	in	r24, 0x1b	; 27
 5f2:	8e 7f       	andi	r24, 0xFE	; 254
 5f4:	8b bb       	out	0x1b, r24	; 27
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 5fc:	26 e8       	ldi	r18, 0x86	; 134
 5fe:	4a ea       	ldi	r20, 0xAA	; 170
 600:	51 e0       	ldi	r21, 0x01	; 1
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	88 e0       	ldi	r24, 0x08	; 8
 608:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SD_Command>
 60c:	ce 01       	movw	r24, r28
 60e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SD_readRes7>
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 618:	8b b3       	in	r24, 0x1b	; 27
 61a:	81 60       	ori	r24, 0x01	; 1
 61c:	8b bb       	out	0x1b, r24	; 27
 61e:	8f ef       	ldi	r24, 0xFF	; 255
 620:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <SD_readOCR>:
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	ec 01       	movw	r28, r24
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 636:	8b b3       	in	r24, 0x1b	; 27
 638:	8e 7f       	andi	r24, 0xFE	; 254
 63a:	8b bb       	out	0x1b, r24	; 27
 63c:	8f ef       	ldi	r24, 0xFF	; 255
 63e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	ba 01       	movw	r22, r20
 64a:	8a e3       	ldi	r24, 0x3A	; 58
 64c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SD_Command>
 650:	ce 01       	movw	r24, r28
 652:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SD_readRes7>
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 65c:	8b b3       	in	r24, 0x1b	; 27
 65e:	81 60       	ori	r24, 0x01	; 1
 660:	8b bb       	out	0x1b, r24	; 27
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <SD_sendApp>:
 66e:	cf 93       	push	r28
 670:	8f ef       	ldi	r24, 0xFF	; 255
 672:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 676:	8b b3       	in	r24, 0x1b	; 27
 678:	8e 7f       	andi	r24, 0xFE	; 254
 67a:	8b bb       	out	0x1b, r24	; 27
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	ba 01       	movw	r22, r20
 68a:	87 e3       	ldi	r24, 0x37	; 55
 68c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SD_Command>
 690:	0e 94 a8 02 	call	0x550	; 0x550 <SD_readRes1>
 694:	c8 2f       	mov	r28, r24
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 69c:	8b b3       	in	r24, 0x1b	; 27
 69e:	81 60       	ori	r24, 0x01	; 1
 6a0:	8b bb       	out	0x1b, r24	; 27
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 6a8:	8c 2f       	mov	r24, r28
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret

000006ae <SD_sendOpCond>:
 6ae:	cf 93       	push	r28
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 6b6:	8b b3       	in	r24, 0x1b	; 27
 6b8:	8e 7f       	andi	r24, 0xFE	; 254
 6ba:	8b bb       	out	0x1b, r24	; 27
 6bc:	8f ef       	ldi	r24, 0xFF	; 255
 6be:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	70 e4       	ldi	r23, 0x40	; 64
 6cc:	89 e2       	ldi	r24, 0x29	; 41
 6ce:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SD_Command>
 6d2:	0e 94 a8 02 	call	0x550	; 0x550 <SD_readRes1>
 6d6:	c8 2f       	mov	r28, r24
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 6de:	8b b3       	in	r24, 0x1b	; 27
 6e0:	81 60       	ori	r24, 0x01	; 1
 6e2:	8b bb       	out	0x1b, r24	; 27
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 6ea:	8c 2f       	mov	r24, r28
 6ec:	cf 91       	pop	r28
 6ee:	08 95       	ret

000006f0 <SD_Init>:
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	00 d0       	rcall	.+0      	; 0x6fa <SD_Init+0xa>
 6fa:	00 d0       	rcall	.+0      	; 0x6fc <SD_Init+0xc>
 6fc:	1f 92       	push	r1
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	0e 94 8b 02 	call	0x516	; 0x516 <SD_powerUpSeq>
 706:	00 e0       	ldi	r16, 0x00	; 0
 708:	03 c0       	rjmp	.+6      	; 0x710 <SD_Init+0x20>
 70a:	0f 5f       	subi	r16, 0xFF	; 255
 70c:	0b 30       	cpi	r16, 0x0B	; 11
 70e:	70 f5       	brcc	.+92     	; 0x76c <SD_Init+0x7c>
 710:	0e 94 b7 02 	call	0x56e	; 0x56e <SD_goIdleState>
 714:	18 2f       	mov	r17, r24
 716:	89 83       	std	Y+1, r24	; 0x01
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	b9 f7       	brne	.-18     	; 0x70a <SD_Init+0x1a>
 71c:	ce 01       	movw	r24, r28
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <SD_sendIfCond>
 724:	89 81       	ldd	r24, Y+1	; 0x01
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	41 f5       	brne	.+80     	; 0x77a <SD_Init+0x8a>
 72a:	8d 81       	ldd	r24, Y+5	; 0x05
 72c:	8a 3a       	cpi	r24, 0xAA	; 170
 72e:	01 f5       	brne	.+64     	; 0x770 <SD_Init+0x80>
 730:	10 e0       	ldi	r17, 0x00	; 0
 732:	15 36       	cpi	r17, 0x65	; 101
 734:	f8 f4       	brcc	.+62     	; 0x774 <SD_Init+0x84>
 736:	0e 94 37 03 	call	0x66e	; 0x66e <SD_sendApp>
 73a:	89 83       	std	Y+1, r24	; 0x01
 73c:	82 30       	cpi	r24, 0x02	; 2
 73e:	18 f4       	brcc	.+6      	; 0x746 <SD_Init+0x56>
 740:	0e 94 57 03 	call	0x6ae	; 0x6ae <SD_sendOpCond>
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	8f e4       	ldi	r24, 0x4F	; 79
 748:	93 ec       	ldi	r25, 0xC3	; 195
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <SD_Init+0x5a>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <SD_Init+0x60>
 750:	00 00       	nop
 752:	1f 5f       	subi	r17, 0xFF	; 255
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	81 11       	cpse	r24, r1
 758:	ec cf       	rjmp	.-40     	; 0x732 <SD_Init+0x42>
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	0e 94 15 03 	call	0x62a	; 0x62a <SD_readOCR>
 762:	8a 81       	ldd	r24, Y+2	; 0x02
 764:	88 23       	and	r24, r24
 766:	44 f0       	brlt	.+16     	; 0x778 <SD_Init+0x88>
 768:	14 e0       	ldi	r17, 0x04	; 4
 76a:	07 c0       	rjmp	.+14     	; 0x77a <SD_Init+0x8a>
 76c:	10 e0       	ldi	r17, 0x00	; 0
 76e:	05 c0       	rjmp	.+10     	; 0x77a <SD_Init+0x8a>
 770:	12 e0       	ldi	r17, 0x02	; 2
 772:	03 c0       	rjmp	.+6      	; 0x77a <SD_Init+0x8a>
 774:	13 e0       	ldi	r17, 0x03	; 3
 776:	01 c0       	rjmp	.+2      	; 0x77a <SD_Init+0x8a>
 778:	15 e0       	ldi	r17, 0x05	; 5
 77a:	81 2f       	mov	r24, r17
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	08 95       	ret

00000790 <SD_RSB>:
 790:	4f 92       	push	r4
 792:	5f 92       	push	r5
 794:	6f 92       	push	r6
 796:	7f 92       	push	r7
 798:	af 92       	push	r10
 79a:	bf 92       	push	r11
 79c:	cf 92       	push	r12
 79e:	df 92       	push	r13
 7a0:	ff 92       	push	r15
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	6c 01       	movw	r12, r24
 7ac:	2a 01       	movw	r4, r20
 7ae:	3b 01       	movw	r6, r22
 7b0:	59 01       	movw	r10, r18
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	f9 01       	movw	r30, r18
 7b6:	80 83       	st	Z, r24
 7b8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 7bc:	8b b3       	in	r24, 0x1b	; 27
 7be:	8e 7f       	andi	r24, 0xFE	; 254
 7c0:	8b bb       	out	0x1b, r24	; 27
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 7c8:	20 e0       	ldi	r18, 0x00	; 0
 7ca:	b3 01       	movw	r22, r6
 7cc:	a2 01       	movw	r20, r4
 7ce:	81 e1       	ldi	r24, 0x11	; 17
 7d0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <SD_Command>
 7d4:	0e 94 a8 02 	call	0x550	; 0x550 <SD_readRes1>
 7d8:	8f 3f       	cpi	r24, 0xFF	; 255
 7da:	49 f4       	brne	.+18     	; 0x7ee <SD_RSB+0x5e>
 7dc:	2b c0       	rjmp	.+86     	; 0x834 <SD_RSB+0xa4>
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 7e4:	f8 2e       	mov	r15, r24
 7e6:	fe ef       	ldi	r31, 0xFE	; 254
 7e8:	8f 13       	cpse	r24, r31
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <SD_RSB+0x62>
 7ec:	07 c0       	rjmp	.+14     	; 0x7fc <SD_RSB+0x6c>
 7ee:	c0 e0       	ldi	r28, 0x00	; 0
 7f0:	d0 e0       	ldi	r29, 0x00	; 0
 7f2:	21 96       	adiw	r28, 0x01	; 1
 7f4:	c4 32       	cpi	r28, 0x24	; 36
 7f6:	84 ef       	ldi	r24, 0xF4	; 244
 7f8:	d8 07       	cpc	r29, r24
 7fa:	89 f7       	brne	.-30     	; 0x7de <SD_RSB+0x4e>
 7fc:	ee ef       	ldi	r30, 0xFE	; 254
 7fe:	fe 12       	cpse	r15, r30
 800:	17 c0       	rjmp	.+46     	; 0x830 <SD_RSB+0xa0>
 802:	0a c0       	rjmp	.+20     	; 0x818 <SD_RSB+0x88>
 804:	86 01       	movw	r16, r12
 806:	0c 0f       	add	r16, r28
 808:	1d 1f       	adc	r17, r29
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 810:	f8 01       	movw	r30, r16
 812:	80 83       	st	Z, r24
 814:	21 96       	adiw	r28, 0x01	; 1
 816:	02 c0       	rjmp	.+4      	; 0x81c <SD_RSB+0x8c>
 818:	c0 e0       	ldi	r28, 0x00	; 0
 81a:	d0 e0       	ldi	r29, 0x00	; 0
 81c:	c1 15       	cp	r28, r1
 81e:	f2 e0       	ldi	r31, 0x02	; 2
 820:	df 07       	cpc	r29, r31
 822:	80 f3       	brcs	.-32     	; 0x804 <SD_RSB+0x74>
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_transfer>
 830:	f5 01       	movw	r30, r10
 832:	f0 82       	st	Z, r15
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	ff 90       	pop	r15
 83e:	df 90       	pop	r13
 840:	cf 90       	pop	r12
 842:	bf 90       	pop	r11
 844:	af 90       	pop	r10
 846:	7f 90       	pop	r7
 848:	6f 90       	pop	r6
 84a:	5f 90       	pop	r5
 84c:	4f 90       	pop	r4
 84e:	08 95       	ret

00000850 <FAT32_Init>:

long RootDirSec;
char MBR=0;
char FSInfo = 1; 

char FAT32_Init(){
 850:	0f 93       	push	r16
 852:	1f 93       	push	r17
	SD_RSB(StatusBuff,0,&token);
 854:	27 ec       	ldi	r18, 0xC7	; 199
 856:	33 e0       	ldi	r19, 0x03	; 3
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	50 e0       	ldi	r21, 0x00	; 0
 85c:	ba 01       	movw	r22, r20
 85e:	84 e4       	ldi	r24, 0x44	; 68
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	0e 94 c8 03 	call	0x790	; 0x790 <SD_RSB>

	if((StatusBuff[510]==0x55)&&(StatusBuff[511]==0xAA)){
 866:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <StatusBuff+0x1fe>
 86a:	85 35       	cpi	r24, 0x55	; 85
 86c:	09 f0       	breq	.+2      	; 0x870 <FAT32_Init+0x20>
 86e:	4b c0       	rjmp	.+150    	; 0x906 <FAT32_Init+0xb6>
 870:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <RXSB>
 874:	8a 3a       	cpi	r24, 0xAA	; 170
 876:	09 f0       	breq	.+2      	; 0x87a <FAT32_Init+0x2a>
 878:	46 c0       	rjmp	.+140    	; 0x906 <FAT32_Init+0xb6>
		USART_Send("\r\n Valid");
 87a:	85 e6       	ldi	r24, 0x65	; 101
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
	}else{return 0;}
RootDirSec = (StatusBuff[15]*256+StatusBuff[14])+ (( (StatusBuff[38]*65536) + ((unsigned) StatusBuff[37]*256) + (StatusBuff[36])) *StatusBuff[16]);
 882:	a4 e4       	ldi	r26, 0x44	; 68
 884:	b1 e0       	ldi	r27, 0x01	; 1
 886:	1f 96       	adiw	r26, 0x0f	; 15
 888:	ec 91       	ld	r30, X
 88a:	1f 97       	sbiw	r26, 0x0f	; 15
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	fe 2f       	mov	r31, r30
 890:	ee 27       	eor	r30, r30
 892:	1e 96       	adiw	r26, 0x0e	; 14
 894:	8c 91       	ld	r24, X
 896:	1e 97       	sbiw	r26, 0x0e	; 14
 898:	e8 0f       	add	r30, r24
 89a:	f1 1d       	adc	r31, r1
 89c:	96 96       	adiw	r26, 0x26	; 38
 89e:	2c 91       	ld	r18, X
 8a0:	96 97       	sbiw	r26, 0x26	; 38
 8a2:	42 2f       	mov	r20, r18
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	ba 01       	movw	r22, r20
 8ac:	55 27       	eor	r21, r21
 8ae:	44 27       	eor	r20, r20
 8b0:	95 96       	adiw	r26, 0x25	; 37
 8b2:	8c 91       	ld	r24, X
 8b4:	95 97       	sbiw	r26, 0x25	; 37
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	98 2f       	mov	r25, r24
 8ba:	88 27       	eor	r24, r24
 8bc:	48 0f       	add	r20, r24
 8be:	59 1f       	adc	r21, r25
 8c0:	61 1d       	adc	r22, r1
 8c2:	71 1d       	adc	r23, r1
 8c4:	94 96       	adiw	r26, 0x24	; 36
 8c6:	8c 91       	ld	r24, X
 8c8:	94 97       	sbiw	r26, 0x24	; 36
 8ca:	9a 01       	movw	r18, r20
 8cc:	ab 01       	movw	r20, r22
 8ce:	28 0f       	add	r18, r24
 8d0:	31 1d       	adc	r19, r1
 8d2:	41 1d       	adc	r20, r1
 8d4:	51 1d       	adc	r21, r1
 8d6:	50 96       	adiw	r26, 0x10	; 16
 8d8:	ac 91       	ld	r26, X
 8da:	b0 e0       	ldi	r27, 0x00	; 0
 8dc:	0e 94 ba 05 	call	0xb74	; 0xb74 <__muluhisi3>
 8e0:	8f 01       	movw	r16, r30
 8e2:	ff 0f       	add	r31, r31
 8e4:	22 0b       	sbc	r18, r18
 8e6:	33 0b       	sbc	r19, r19
 8e8:	dc 01       	movw	r26, r24
 8ea:	cb 01       	movw	r24, r22
 8ec:	80 0f       	add	r24, r16
 8ee:	91 1f       	adc	r25, r17
 8f0:	a2 1f       	adc	r26, r18
 8f2:	b3 1f       	adc	r27, r19
 8f4:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <RootDirSec>
 8f8:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <RootDirSec+0x1>
 8fc:	a0 93 c5 03 	sts	0x03C5, r26	; 0x8003c5 <RootDirSec+0x2>
 900:	b0 93 c6 03 	sts	0x03C6, r27	; 0x8003c6 <RootDirSec+0x3>
}
 904:	01 c0       	rjmp	.+2      	; 0x908 <FAT32_Init+0xb8>
char FAT32_Init(){
	SD_RSB(StatusBuff,0,&token);

	if((StatusBuff[510]==0x55)&&(StatusBuff[511]==0xAA)){
		USART_Send("\r\n Valid");
	}else{return 0;}
 906:	80 e0       	ldi	r24, 0x00	; 0
RootDirSec = (StatusBuff[15]*256+StatusBuff[14])+ (( (StatusBuff[38]*65536) + ((unsigned) StatusBuff[37]*256) + (StatusBuff[36])) *StatusBuff[16]);
}
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	08 95       	ret

0000090e <FAT32_Open_File>:


void FAT32_Open_File(char str[]){
 90e:	cf 92       	push	r12
 910:	df 92       	push	r13
 912:	ef 92       	push	r14
 914:	ff 92       	push	r15
 916:	0f 93       	push	r16
 918:	1f 93       	push	r17
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	ec 01       	movw	r28, r24
short flag=1;
char Attr =0;
uint32_t Clust;

//Find Location of file 
	for (int i=0; i<0xFFFF; i++){
 920:	e1 2c       	mov	r14, r1
 922:	f1 2c       	mov	r15, r1


void FAT32_Open_File(char str[]){
char locX =0;
char locI =0;	
short flag=1;
 924:	01 e0       	ldi	r16, 0x01	; 1
 926:	10 e0       	ldi	r17, 0x00	; 0
}


void FAT32_Open_File(char str[]){
char locX =0;
char locI =0;	
 928:	c1 2c       	mov	r12, r1
RootDirSec = (StatusBuff[15]*256+StatusBuff[14])+ (( (StatusBuff[38]*65536) + ((unsigned) StatusBuff[37]*256) + (StatusBuff[36])) *StatusBuff[16]);
}


void FAT32_Open_File(char str[]){
char locX =0;
 92a:	d1 2c       	mov	r13, r1
short flag=1;
char Attr =0;
uint32_t Clust;

//Find Location of file 
	for (int i=0; i<0xFFFF; i++){
 92c:	5e c0       	rjmp	.+188    	; 0x9ea <FAT32_Open_File+0xdc>
		
		SD_RSB(StatusBuff,RootDirSec+i,&token);
 92e:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <RootDirSec>
 932:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <RootDirSec+0x1>
 936:	a0 91 c5 03 	lds	r26, 0x03C5	; 0x8003c5 <RootDirSec+0x2>
 93a:	b0 91 c6 03 	lds	r27, 0x03C6	; 0x8003c6 <RootDirSec+0x3>
 93e:	a7 01       	movw	r20, r14
 940:	0f 2c       	mov	r0, r15
 942:	00 0c       	add	r0, r0
 944:	66 0b       	sbc	r22, r22
 946:	77 0b       	sbc	r23, r23
 948:	48 0f       	add	r20, r24
 94a:	59 1f       	adc	r21, r25
 94c:	6a 1f       	adc	r22, r26
 94e:	7b 1f       	adc	r23, r27
 950:	27 ec       	ldi	r18, 0xC7	; 199
 952:	33 e0       	ldi	r19, 0x03	; 3
 954:	84 e4       	ldi	r24, 0x44	; 68
 956:	91 e0       	ldi	r25, 0x01	; 1
 958:	0e 94 c8 03 	call	0x790	; 0x790 <SD_RSB>
		
		for(int x=0; x<= 511; x++){
 95c:	20 e0       	ldi	r18, 0x00	; 0
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	3a c0       	rjmp	.+116    	; 0x9d6 <FAT32_Open_File+0xc8>
			
			if(StatusBuff[x]==str[0]){
 962:	f9 01       	movw	r30, r18
 964:	ec 5b       	subi	r30, 0xBC	; 188
 966:	fe 4f       	sbci	r31, 0xFE	; 254
 968:	90 81       	ld	r25, Z
 96a:	88 81       	ld	r24, Y
 96c:	98 13       	cpse	r25, r24
 96e:	2e c0       	rjmp	.+92     	; 0x9cc <FAT32_Open_File+0xbe>
 970:	10 c0       	rjmp	.+32     	; 0x992 <FAT32_Open_File+0x84>
	           flag=1; 
				
				for(int y=0; y <strlen(str); y++){
					if (StatusBuff[x+y]!=str[0+y]){flag=0;}
 972:	f9 01       	movw	r30, r18
 974:	e8 0f       	add	r30, r24
 976:	f9 1f       	adc	r31, r25
 978:	ec 5b       	subi	r30, 0xBC	; 188
 97a:	fe 4f       	sbci	r31, 0xFE	; 254
 97c:	50 81       	ld	r21, Z
 97e:	fe 01       	movw	r30, r28
 980:	e8 0f       	add	r30, r24
 982:	f9 1f       	adc	r31, r25
 984:	40 81       	ld	r20, Z
 986:	54 17       	cp	r21, r20
 988:	11 f0       	breq	.+4      	; 0x98e <FAT32_Open_File+0x80>
 98a:	00 e0       	ldi	r16, 0x00	; 0
 98c:	10 e0       	ldi	r17, 0x00	; 0
		for(int x=0; x<= 511; x++){
			
			if(StatusBuff[x]==str[0]){
	           flag=1; 
				
				for(int y=0; y <strlen(str); y++){
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	04 c0       	rjmp	.+8      	; 0x99a <FAT32_Open_File+0x8c>
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	01 e0       	ldi	r16, 0x01	; 1
 998:	10 e0       	ldi	r17, 0x00	; 0
 99a:	fe 01       	movw	r30, r28
 99c:	01 90       	ld	r0, Z+
 99e:	00 20       	and	r0, r0
 9a0:	e9 f7       	brne	.-6      	; 0x99c <FAT32_Open_File+0x8e>
 9a2:	31 97       	sbiw	r30, 0x01	; 1
 9a4:	ec 1b       	sub	r30, r28
 9a6:	fd 0b       	sbc	r31, r29
 9a8:	8e 17       	cp	r24, r30
 9aa:	9f 07       	cpc	r25, r31
 9ac:	10 f3       	brcs	.-60     	; 0x972 <FAT32_Open_File+0x64>
					if (StatusBuff[x+y]!=str[0+y]){flag=0;}
				}
				
				if(flag!=0){
 9ae:	01 15       	cp	r16, r1
 9b0:	11 05       	cpc	r17, r1
 9b2:	49 f0       	breq	.+18     	; 0x9c6 <FAT32_Open_File+0xb8>
					locX=x;
 9b4:	d2 2e       	mov	r13, r18
					locI=i;
 9b6:	ce 2c       	mov	r12, r14
					USART_Send("\r\n Found ");
 9b8:	8e e6       	ldi	r24, 0x6E	; 110
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
					flag =2;
 9c0:	02 e0       	ldi	r16, 0x02	; 2
 9c2:	10 e0       	ldi	r17, 0x00	; 0
					break;
 9c4:	0c c0       	rjmp	.+24     	; 0x9de <FAT32_Open_File+0xd0>
				}
		if(flag==2){break;}	
 9c6:	02 30       	cpi	r16, 0x02	; 2
 9c8:	11 05       	cpc	r17, r1
 9ca:	49 f0       	breq	.+18     	; 0x9de <FAT32_Open_File+0xd0>
		}
	if(flag==2){break;}
 9cc:	02 30       	cpi	r16, 0x02	; 2
 9ce:	11 05       	cpc	r17, r1
 9d0:	31 f0       	breq	.+12     	; 0x9de <FAT32_Open_File+0xd0>
//Find Location of file 
	for (int i=0; i<0xFFFF; i++){
		
		SD_RSB(StatusBuff,RootDirSec+i,&token);
		
		for(int x=0; x<= 511; x++){
 9d2:	2f 5f       	subi	r18, 0xFF	; 255
 9d4:	3f 4f       	sbci	r19, 0xFF	; 255
 9d6:	21 15       	cp	r18, r1
 9d8:	82 e0       	ldi	r24, 0x02	; 2
 9da:	38 07       	cpc	r19, r24
 9dc:	14 f2       	brlt	.-124    	; 0x962 <FAT32_Open_File+0x54>
				}
		if(flag==2){break;}	
		}
	if(flag==2){break;}
	}	
if(flag==2){break;}
 9de:	02 30       	cpi	r16, 0x02	; 2
 9e0:	11 05       	cpc	r17, r1
 9e2:	41 f0       	breq	.+16     	; 0x9f4 <FAT32_Open_File+0xe6>
short flag=1;
char Attr =0;
uint32_t Clust;

//Find Location of file 
	for (int i=0; i<0xFFFF; i++){
 9e4:	8f ef       	ldi	r24, 0xFF	; 255
 9e6:	e8 1a       	sub	r14, r24
 9e8:	f8 0a       	sbc	r15, r24
 9ea:	8f ef       	ldi	r24, 0xFF	; 255
 9ec:	e8 16       	cp	r14, r24
 9ee:	f8 06       	cpc	r15, r24
 9f0:	09 f0       	breq	.+2      	; 0x9f4 <FAT32_Open_File+0xe6>
 9f2:	9d cf       	rjmp	.-198    	; 0x92e <FAT32_Open_File+0x20>
	if(flag==2){break;}
	}	
if(flag==2){break;}
}

if(flag !=0){
 9f4:	01 2b       	or	r16, r17
 9f6:	09 f4       	brne	.+2      	; 0x9fa <FAT32_Open_File+0xec>
 9f8:	4e c0       	rjmp	.+156    	; 0xa96 <FAT32_Open_File+0x188>
SD_RSB(StatusBuff,RootDirSec+locI,&token);
 9fa:	40 91 c3 03 	lds	r20, 0x03C3	; 0x8003c3 <RootDirSec>
 9fe:	50 91 c4 03 	lds	r21, 0x03C4	; 0x8003c4 <RootDirSec+0x1>
 a02:	60 91 c5 03 	lds	r22, 0x03C5	; 0x8003c5 <RootDirSec+0x2>
 a06:	70 91 c6 03 	lds	r23, 0x03C6	; 0x8003c6 <RootDirSec+0x3>
 a0a:	4c 0d       	add	r20, r12
 a0c:	51 1d       	adc	r21, r1
 a0e:	61 1d       	adc	r22, r1
 a10:	71 1d       	adc	r23, r1
 a12:	27 ec       	ldi	r18, 0xC7	; 199
 a14:	33 e0       	ldi	r19, 0x03	; 3
 a16:	84 e4       	ldi	r24, 0x44	; 68
 a18:	91 e0       	ldi	r25, 0x01	; 1
 a1a:	0e 94 c8 03 	call	0x790	; 0x790 <SD_RSB>
Attr=StatusBuff[locX+0x0B];
 a1e:	cd 2d       	mov	r28, r13
 a20:	d0 e0       	ldi	r29, 0x00	; 0


USART_Int_StrHEXRAW(StatusBuff[locX+0x14+1],0);
 a22:	fe 01       	movw	r30, r28
 a24:	e7 5a       	subi	r30, 0xA7	; 167
 a26:	fe 4f       	sbci	r31, 0xFE	; 254
 a28:	80 81       	ld	r24, Z
 a2a:	60 e0       	ldi	r22, 0x00	; 0
 a2c:	70 e0       	ldi	r23, 0x00	; 0
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
USART_Int_StrHEXRAW(StatusBuff[locX+0x14],0);
 a34:	fe 01       	movw	r30, r28
 a36:	e8 5a       	subi	r30, 0xA8	; 168
 a38:	fe 4f       	sbci	r31, 0xFE	; 254
 a3a:	80 81       	ld	r24, Z
 a3c:	60 e0       	ldi	r22, 0x00	; 0
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
USART_Int_StrHEXRAW(StatusBuff[locX+0x1a+1],0);
 a46:	fe 01       	movw	r30, r28
 a48:	e1 5a       	subi	r30, 0xA1	; 161
 a4a:	fe 4f       	sbci	r31, 0xFE	; 254
 a4c:	80 81       	ld	r24, Z
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
USART_Int_StrHEXRAW(StatusBuff[locX+0x1a],0);
 a58:	fe 01       	movw	r30, r28
 a5a:	e2 5a       	subi	r30, 0xA2	; 162
 a5c:	fe 4f       	sbci	r31, 0xFE	; 254
 a5e:	80 81       	ld	r24, Z
 a60:	60 e0       	ldi	r22, 0x00	; 0
 a62:	70 e0       	ldi	r23, 0x00	; 0
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>

USART_Send("\r\n");
 a6a:	88 e7       	ldi	r24, 0x78	; 120
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
for(int t = locX; t<locX+32; t++){USART_Int_StrHEXRAW(StatusBuff[t],0);}
 a72:	8e 01       	movw	r16, r28
 a74:	0b c0       	rjmp	.+22     	; 0xa8c <FAT32_Open_File+0x17e>
 a76:	f8 01       	movw	r30, r16
 a78:	ec 5b       	subi	r30, 0xBC	; 188
 a7a:	fe 4f       	sbci	r31, 0xFE	; 254
 a7c:	80 81       	ld	r24, Z
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Int_StrHEXRAW>
 a88:	0f 5f       	subi	r16, 0xFF	; 255
 a8a:	1f 4f       	sbci	r17, 0xFF	; 255
 a8c:	ce 01       	movw	r24, r28
 a8e:	80 96       	adiw	r24, 0x20	; 32
 a90:	08 17       	cp	r16, r24
 a92:	19 07       	cpc	r17, r25
 a94:	84 f3       	brlt	.-32     	; 0xa76 <FAT32_Open_File+0x168>
}

	}
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	1f 91       	pop	r17
 a9c:	0f 91       	pop	r16
 a9e:	ff 90       	pop	r15
 aa0:	ef 90       	pop	r14
 aa2:	df 90       	pop	r13
 aa4:	cf 90       	pop	r12
 aa6:	08 95       	ret

00000aa8 <main>:
#include <USART_AM16.c>
#include <SPI_ATM16.c>
#include <MicroSD_AM16.c>

int main(void)
{
 aa8:	0f 93       	push	r16
 aaa:	1f 93       	push	r17
 aac:	cf 93       	push	r28

// memset(buff,59,512);

DDRA=0xF;
 aae:	8f e0       	ldi	r24, 0x0F	; 15
 ab0:	8a bb       	out	0x1a, r24	; 26
PORTA=0xF;
 ab2:	8b bb       	out	0x1b, r24	; 27

USART_init(0,8,9600);
 ab4:	20 e8       	ldi	r18, 0x80	; 128
 ab6:	35 e2       	ldi	r19, 0x25	; 37
 ab8:	40 e0       	ldi	r20, 0x00	; 0
 aba:	50 e0       	ldi	r21, 0x00	; 0
 abc:	68 e0       	ldi	r22, 0x08	; 8
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	0e 94 49 00 	call	0x92	; 0x92 <USART_init>
SPI_MAST_Init(0,128,0,0,0);
 ac8:	00 e0       	ldi	r16, 0x00	; 0
 aca:	10 e0       	ldi	r17, 0x00	; 0
 acc:	20 e0       	ldi	r18, 0x00	; 0
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	40 e0       	ldi	r20, 0x00	; 0
 ad2:	50 e0       	ldi	r21, 0x00	; 0
 ad4:	60 e8       	ldi	r22, 0x80	; 128
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 02 02 	call	0x404	; 0x404 <SPI_MAST_Init>


char SDIS = SD_Init();
 ae0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <SD_Init>
 ae4:	c8 2f       	mov	r28, r24
USART_Send("\r\nHello Void. I have awoken\r\n Response | ");
 ae6:	8b e7       	ldi	r24, 0x7B	; 123
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	0e 94 10 01 	call	0x220	; 0x220 <USART_Send>
USART_Int_Str(SDIS,0);
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	8c 2f       	mov	r24, r28
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	0e 94 5f 01 	call	0x2be	; 0x2be <USART_Int_Str>

 if(SDIS==5){
 afa:	c5 30       	cpi	r28, 0x05	; 5
 afc:	99 f4       	brne	.+38     	; 0xb24 <main+0x7c>
FAT32_Init();
 afe:	0e 94 28 04 	call	0x850	; 0x850 <FAT32_Init>
FAT32_Open_File("VOID");
 b02:	85 ea       	ldi	r24, 0xA5	; 165
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 87 04 	call	0x90e	; 0x90e <FAT32_Open_File>
SD_RSB(StatusBuff,0x5700576,&token);	
 b0a:	27 ec       	ldi	r18, 0xC7	; 199
 b0c:	33 e0       	ldi	r19, 0x03	; 3
 b0e:	46 e7       	ldi	r20, 0x76	; 118
 b10:	55 e0       	ldi	r21, 0x05	; 5
 b12:	60 e7       	ldi	r22, 0x70	; 112
 b14:	75 e0       	ldi	r23, 0x05	; 5
 b16:	84 e4       	ldi	r24, 0x44	; 68
 b18:	91 e0       	ldi	r25, 0x01	; 1
 b1a:	0e 94 c8 03 	call	0x790	; 0x790 <SD_RSB>
return 0xFF; 	
 b1e:	8f ef       	ldi	r24, 0xFF	; 255
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <main+0x80>
 b24:	80 e0       	ldi	r24, 0x00	; 0
 b26:	90 e0       	ldi	r25, 0x00	; 0
}
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	08 95       	ret

00000b30 <__udivmodsi4>:
 b30:	a1 e2       	ldi	r26, 0x21	; 33
 b32:	1a 2e       	mov	r1, r26
 b34:	aa 1b       	sub	r26, r26
 b36:	bb 1b       	sub	r27, r27
 b38:	fd 01       	movw	r30, r26
 b3a:	0d c0       	rjmp	.+26     	; 0xb56 <__udivmodsi4_ep>

00000b3c <__udivmodsi4_loop>:
 b3c:	aa 1f       	adc	r26, r26
 b3e:	bb 1f       	adc	r27, r27
 b40:	ee 1f       	adc	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	a2 17       	cp	r26, r18
 b46:	b3 07       	cpc	r27, r19
 b48:	e4 07       	cpc	r30, r20
 b4a:	f5 07       	cpc	r31, r21
 b4c:	20 f0       	brcs	.+8      	; 0xb56 <__udivmodsi4_ep>
 b4e:	a2 1b       	sub	r26, r18
 b50:	b3 0b       	sbc	r27, r19
 b52:	e4 0b       	sbc	r30, r20
 b54:	f5 0b       	sbc	r31, r21

00000b56 <__udivmodsi4_ep>:
 b56:	66 1f       	adc	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	1a 94       	dec	r1
 b60:	69 f7       	brne	.-38     	; 0xb3c <__udivmodsi4_loop>
 b62:	60 95       	com	r22
 b64:	70 95       	com	r23
 b66:	80 95       	com	r24
 b68:	90 95       	com	r25
 b6a:	9b 01       	movw	r18, r22
 b6c:	ac 01       	movw	r20, r24
 b6e:	bd 01       	movw	r22, r26
 b70:	cf 01       	movw	r24, r30
 b72:	08 95       	ret

00000b74 <__muluhisi3>:
 b74:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__umulhisi3>
 b78:	a5 9f       	mul	r26, r21
 b7a:	90 0d       	add	r25, r0
 b7c:	b4 9f       	mul	r27, r20
 b7e:	90 0d       	add	r25, r0
 b80:	a4 9f       	mul	r26, r20
 b82:	80 0d       	add	r24, r0
 b84:	91 1d       	adc	r25, r1
 b86:	11 24       	eor	r1, r1
 b88:	08 95       	ret

00000b8a <__umulhisi3>:
 b8a:	a2 9f       	mul	r26, r18
 b8c:	b0 01       	movw	r22, r0
 b8e:	b3 9f       	mul	r27, r19
 b90:	c0 01       	movw	r24, r0
 b92:	a3 9f       	mul	r26, r19
 b94:	70 0d       	add	r23, r0
 b96:	81 1d       	adc	r24, r1
 b98:	11 24       	eor	r1, r1
 b9a:	91 1d       	adc	r25, r1
 b9c:	b2 9f       	mul	r27, r18
 b9e:	70 0d       	add	r23, r0
 ba0:	81 1d       	adc	r24, r1
 ba2:	11 24       	eor	r1, r1
 ba4:	91 1d       	adc	r25, r1
 ba6:	08 95       	ret

00000ba8 <__itoa_ncheck>:
 ba8:	bb 27       	eor	r27, r27
 baa:	4a 30       	cpi	r20, 0x0A	; 10
 bac:	31 f4       	brne	.+12     	; 0xbba <__itoa_ncheck+0x12>
 bae:	99 23       	and	r25, r25
 bb0:	22 f4       	brpl	.+8      	; 0xbba <__itoa_ncheck+0x12>
 bb2:	bd e2       	ldi	r27, 0x2D	; 45
 bb4:	90 95       	com	r25
 bb6:	81 95       	neg	r24
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__utoa_common>

00000bbe <__utoa_ncheck>:
 bbe:	bb 27       	eor	r27, r27

00000bc0 <__utoa_common>:
 bc0:	fb 01       	movw	r30, r22
 bc2:	55 27       	eor	r21, r21
 bc4:	aa 27       	eor	r26, r26
 bc6:	88 0f       	add	r24, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	aa 1f       	adc	r26, r26
 bcc:	a4 17       	cp	r26, r20
 bce:	10 f0       	brcs	.+4      	; 0xbd4 <__utoa_common+0x14>
 bd0:	a4 1b       	sub	r26, r20
 bd2:	83 95       	inc	r24
 bd4:	50 51       	subi	r21, 0x10	; 16
 bd6:	b9 f7       	brne	.-18     	; 0xbc6 <__utoa_common+0x6>
 bd8:	a0 5d       	subi	r26, 0xD0	; 208
 bda:	aa 33       	cpi	r26, 0x3A	; 58
 bdc:	08 f0       	brcs	.+2      	; 0xbe0 <__utoa_common+0x20>
 bde:	a9 5d       	subi	r26, 0xD9	; 217
 be0:	a1 93       	st	Z+, r26
 be2:	00 97       	sbiw	r24, 0x00	; 0
 be4:	79 f7       	brne	.-34     	; 0xbc4 <__utoa_common+0x4>
 be6:	b1 11       	cpse	r27, r1
 be8:	b1 93       	st	Z+, r27
 bea:	11 92       	st	Z+, r1
 bec:	cb 01       	movw	r24, r22
 bee:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <strrev>

00000bf2 <strrev>:
 bf2:	dc 01       	movw	r26, r24
 bf4:	fc 01       	movw	r30, r24
 bf6:	67 2f       	mov	r22, r23
 bf8:	71 91       	ld	r23, Z+
 bfa:	77 23       	and	r23, r23
 bfc:	e1 f7       	brne	.-8      	; 0xbf6 <strrev+0x4>
 bfe:	32 97       	sbiw	r30, 0x02	; 2
 c00:	04 c0       	rjmp	.+8      	; 0xc0a <strrev+0x18>
 c02:	7c 91       	ld	r23, X
 c04:	6d 93       	st	X+, r22
 c06:	70 83       	st	Z, r23
 c08:	62 91       	ld	r22, -Z
 c0a:	ae 17       	cp	r26, r30
 c0c:	bf 07       	cpc	r27, r31
 c0e:	c8 f3       	brcs	.-14     	; 0xc02 <strrev+0x10>
 c10:	08 95       	ret

00000c12 <_exit>:
 c12:	f8 94       	cli

00000c14 <__stop_program>:
 c14:	ff cf       	rjmp	.-2      	; 0xc14 <__stop_program>
